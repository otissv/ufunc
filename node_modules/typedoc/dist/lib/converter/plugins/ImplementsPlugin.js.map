{"version":3,"file":"ImplementsPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/ImplementsPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Reflection,\n    ReflectionKind,\n    DeclarationReflection,\n    SignatureReflection,\n} from \"../../models/reflections/index\";\nimport { Type, ReferenceType } from \"../../models/types/index\";\nimport { Component, ConverterComponent } from \"../components\";\nimport { Converter } from \"../converter\";\nimport { Context } from \"../context\";\nimport { Comment } from \"../../models/comments/comment\";\nimport { zip } from \"../../utils/array\";\n\n/**\n * A plugin that detects interface implementations of functions and\n * properties on classes and links them.\n */\n@Component({ name: \"implements\" })\nexport class ImplementsPlugin extends ConverterComponent {\n    /**\n     * Create a new ImplementsPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, Converter.EVENT_RESOLVE, this.onResolve, -10);\n    }\n\n    /**\n     * Mark all members of the given class to be the implementation of the matching interface member.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param classReflection  The reflection of the classReflection class.\n     * @param interfaceReflection  The reflection of the interfaceReflection interface.\n     */\n    private analyzeClass(\n        context: Context,\n        classReflection: DeclarationReflection,\n        interfaceReflection: DeclarationReflection\n    ) {\n        if (!interfaceReflection.children) {\n            return;\n        }\n\n        interfaceReflection.children.forEach(\n            (interfaceMember: DeclarationReflection) => {\n                if (!(interfaceMember instanceof DeclarationReflection)) {\n                    return;\n                }\n\n                let classMember: DeclarationReflection | undefined;\n\n                if (!classReflection.children) {\n                    return;\n                }\n\n                for (\n                    let index = 0, count = classReflection.children.length;\n                    index < count;\n                    index++\n                ) {\n                    const child = classReflection.children[index];\n                    if (child.name !== interfaceMember.name) {\n                        continue;\n                    }\n                    if (\n                        child.flags.isStatic !== interfaceMember.flags.isStatic\n                    ) {\n                        continue;\n                    }\n\n                    classMember = child;\n                    break;\n                }\n\n                if (!classMember) {\n                    return;\n                }\n\n                const interfaceMemberName =\n                    interfaceReflection.name + \".\" + interfaceMember.name;\n                classMember.implementationOf = new ReferenceType(\n                    interfaceMemberName,\n                    interfaceMember,\n                    context.project\n                );\n                this.copyComment(classMember, interfaceMember);\n\n                if (\n                    interfaceMember.kindOf(ReflectionKind.FunctionOrMethod) &&\n                    interfaceMember.signatures &&\n                    classMember.signatures\n                ) {\n                    interfaceMember.signatures.forEach(\n                        (interfaceSignature: SignatureReflection) => {\n                            const interfaceParameters = interfaceSignature.getParameterTypes();\n                            (classMember!.signatures || []).forEach(\n                                (classSignature: SignatureReflection) => {\n                                    if (\n                                        Type.isTypeListEqual(\n                                            interfaceParameters,\n                                            classSignature.getParameterTypes()\n                                        )\n                                    ) {\n                                        classSignature.implementationOf = new ReferenceType(\n                                            interfaceMemberName,\n                                            interfaceSignature,\n                                            context.project\n                                        );\n                                        this.copyComment(\n                                            classSignature,\n                                            interfaceSignature\n                                        );\n                                    }\n                                }\n                            );\n                        }\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Copy the comment of the source reflection to the target reflection.\n     *\n     * @param target\n     * @param source\n     */\n    private copyComment(target: Reflection, source: Reflection) {\n        if (\n            target.comment &&\n            source.comment &&\n            target.comment.hasTag(\"inheritdoc\")\n        ) {\n            target.comment.copyFrom(source.comment);\n\n            if (\n                target instanceof SignatureReflection &&\n                target.parameters &&\n                source instanceof SignatureReflection &&\n                source.parameters\n            ) {\n                for (\n                    let index = 0, count = target.parameters.length;\n                    index < count;\n                    index++\n                ) {\n                    const sourceParameter = source.parameters[index];\n                    if (sourceParameter && sourceParameter.comment) {\n                        const targetParameter = target.parameters[index];\n                        if (!targetParameter.comment) {\n                            targetParameter.comment = new Comment();\n                            targetParameter.comment.copyFrom(\n                                sourceParameter.comment\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private analyzeInheritance(\n        context: Context,\n        reflection: DeclarationReflection\n    ) {\n        const extendedTypes = (reflection.extendedTypes?.filter((type) => {\n            return (\n                type instanceof ReferenceType &&\n                type.reflection instanceof DeclarationReflection\n            );\n        }) ?? []) as Array<\n            ReferenceType & { reflection: DeclarationReflection }\n        >;\n\n        for (const parent of extendedTypes) {\n            for (const parentMember of parent.reflection.children ?? []) {\n                const child = reflection.children?.find(\n                    (child) =>\n                        child.name == parentMember.name &&\n                        child.flags.isStatic === parentMember.flags.isStatic\n                );\n\n                if (child) {\n                    const key = child.getOverwrites()\n                        ? \"overwrites\"\n                        : \"inheritedFrom\";\n\n                    for (const [childSig, parentSig] of zip(\n                        child.signatures ?? [],\n                        parentMember.signatures ?? []\n                    )) {\n                        childSig[key] = new ReferenceType(\n                            `${parent.name}.${parentMember.name}`,\n                            parentSig,\n                            context.project\n                        );\n                    }\n\n                    child[key] = new ReferenceType(\n                        `${parent.name}.${parentMember.name}`,\n                        parentMember,\n                        context.project\n                    );\n                    this.copyComment(child, parentMember);\n                }\n            }\n        }\n    }\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(context: Context, reflection: DeclarationReflection) {\n        if (\n            reflection.kindOf(ReflectionKind.Class) &&\n            reflection.implementedTypes\n        ) {\n            reflection.implementedTypes.forEach((type: Type) => {\n                if (!(type instanceof ReferenceType)) {\n                    return;\n                }\n\n                if (\n                    type.reflection &&\n                    type.reflection.kindOf(ReflectionKind.Interface)\n                ) {\n                    this.analyzeClass(\n                        context,\n                        reflection,\n                        <DeclarationReflection>type.reflection\n                    );\n                }\n            });\n        }\n\n        if (\n            reflection.kindOf([\n                ReflectionKind.Class,\n                ReflectionKind.Interface,\n            ]) &&\n            reflection.extendedTypes\n        ) {\n            this.analyzeInheritance(context, reflection);\n        }\n    }\n}\n"]}