{"version":3,"file":"comment.js","sourceRoot":"","sources":["../../../../src/lib/models/comments/comment.ts"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,+BAAmC;AAEnC;;;;;GAKG;AACH,MAAa,OAAO;IAsBhB;;OAEG;IACH,YAAY,SAAkB,EAAE,IAAa;QAR7C;;WAEG;QACH,SAAI,GAAiB,EAAE,CAAC;QAMpB,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,EAAE,CAAC;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,mBAAmB;QACf,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IACnE,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,OAAe;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;IAC5D,CAAC;IAED;;;;;;;;OAQG;IACH,MAAM,CAAC,OAAe,EAAE,SAAkB;QACtC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC1B,OAAO,CACH,GAAG,CAAC,OAAO,KAAK,OAAO;gBACvB,CAAC,SAAS,KAAK,KAAK,CAAC,IAAI,GAAG,CAAC,SAAS,KAAK,SAAS,CAAC,CACxD,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,OAAe;QACtB,gBAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;IAC1D,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,OAAgB;QACrB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CACxB,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,gBAAU,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,CAChE,CAAC;IACN,CAAC;CACJ;AAxFD,0BAwFC","sourcesContent":["import { removeIf } from \"../../utils\";\nimport { CommentTag } from \"./tag\";\n\n/**\n * A model that represents a comment.\n *\n * Instances of this model are created by the [[CommentPlugin]]. You can retrieve comments\n * through the [[DeclarationReflection.comment]] property.\n */\nexport class Comment {\n    /**\n     * The abstract of the comment. TypeDoc interprets the first paragraph of a comment\n     * as the abstract.\n     */\n    shortText: string;\n\n    /**\n     * The full body text of the comment. Excludes the [[shortText]].\n     */\n    text: string;\n\n    /**\n     * The text of the ```@returns``` tag if present.\n     */\n    returns?: string;\n\n    /**\n     * All associated tags.\n     */\n    tags: CommentTag[] = [];\n\n    /**\n     * Creates a new Comment instance.\n     */\n    constructor(shortText?: string, text?: string) {\n        this.shortText = shortText || \"\";\n        this.text = text || \"\";\n    }\n\n    /**\n     * Has this comment a visible component?\n     *\n     * @returns TRUE when this comment has a visible component.\n     */\n    hasVisibleComponent(): boolean {\n        return !!this.shortText || !!this.text || this.tags.length > 0;\n    }\n\n    /**\n     * Test whether this comment contains a tag with the given name.\n     *\n     * @param tagName  The name of the tag to look for.\n     * @returns TRUE when this comment contains a tag with the given name, otherwise FALSE.\n     */\n    hasTag(tagName: string): boolean {\n        return this.tags.some((tag) => tag.tagName === tagName);\n    }\n\n    /**\n     * Return the first tag with the given name.\n     *\n     * You can optionally pass a parameter name that should be searched to.\n     *\n     * @param tagName  The name of the tag to look for.\n     * @param paramName  An optional parameter name to look for.\n     * @returns The found tag or undefined.\n     */\n    getTag(tagName: string, paramName?: string): CommentTag | undefined {\n        return this.tags.find((tag) => {\n            return (\n                tag.tagName === tagName &&\n                (paramName === void 0 || tag.paramName === paramName)\n            );\n        });\n    }\n\n    /**\n     * Removes all tags with the given tag name from teh comment.\n     * @param tagName\n     */\n    removeTags(tagName: string) {\n        removeIf(this.tags, (tag) => tag.tagName === tagName);\n    }\n\n    /**\n     * Copy the data of the given comment into this comment.\n     *\n     * @param comment\n     */\n    copyFrom(comment: Comment) {\n        this.shortText = comment.shortText;\n        this.text = comment.text;\n        this.returns = comment.returns;\n        this.tags = comment.tags.map(\n            (tag) => new CommentTag(tag.tagName, tag.paramName, tag.text)\n        );\n    }\n}\n"]}