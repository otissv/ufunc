{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolve, basename } from \"path\";\nimport { existsSync, statSync } from \"fs\";\n\nimport * as ts from \"typescript\";\n\nimport { OptionsReader, Options } from \"../options\";\nimport { Logger } from \"../../loggers\";\nimport { normalizePath } from \"../../fs\";\n\nfunction isFile(file: string) {\n    return existsSync(file) && statSync(file).isFile();\n}\n\nexport class TSConfigReader implements OptionsReader {\n    /**\n     * Note: Runs after the [[TypeDocReader]].\n     */\n    priority = 200;\n\n    name = \"tsconfig-json\";\n\n    read(container: Options, logger: Logger): void {\n        const tsconfigOpt = container.getValue(\"tsconfig\");\n\n        if (!container.isDefault(\"tsconfig\")) {\n            this._tryReadOptions(tsconfigOpt, container, logger);\n            return;\n        }\n\n        // Don't log errors if we try to read by default.\n        this._tryReadOptions(tsconfigOpt, container);\n    }\n\n    private _tryReadOptions(\n        file: string,\n        container: Options & { setValue(name: string, value: unknown): void },\n        logger?: Logger\n    ): void {\n        let fileToRead: string | undefined = file;\n        if (!isFile(fileToRead)) {\n            fileToRead = ts.findConfigFile(\n                file,\n                isFile,\n                file.toLowerCase().endsWith(\".json\")\n                    ? basename(file)\n                    : undefined\n            );\n        }\n\n        if (!fileToRead || !isFile(fileToRead)) {\n            logger?.error(`The tsconfig file ${file} does not exist`);\n            return;\n        }\n\n        fileToRead = normalizePath(resolve(fileToRead));\n\n        let fatalError = false as boolean;\n        const parsed = ts.getParsedCommandLineOfConfigFile(\n            fileToRead,\n            {},\n            {\n                ...ts.sys,\n                onUnRecoverableConfigFileDiagnostic(error) {\n                    logger?.diagnostic(error);\n                    fatalError = true;\n                },\n            }\n        );\n\n        if (!parsed || fatalError) {\n            return;\n        }\n\n        logger?.diagnostics(parsed.errors);\n\n        const typedocOptions = parsed.raw?.typedocOptions ?? {};\n        if (typedocOptions.options) {\n            logger?.error(\n                [\n                    \"typedocOptions in tsconfig file specifies an option file to read but the option\",\n                    \"file has already been read. This is likely a misconfiguration.\",\n                ].join(\" \")\n            );\n            delete typedocOptions.options;\n        }\n        if (typedocOptions.tsconfig) {\n            logger?.error(\n                \"typedocOptions in tsconfig file may not specify a tsconfig file to read\"\n            );\n            delete typedocOptions.tsconfig;\n        }\n\n        container.setCompilerOptions(\n            parsed.fileNames,\n            parsed.options,\n            parsed.projectReferences\n        );\n        for (const [key, val] of Object.entries(typedocOptions || {})) {\n            try {\n                container.setValue(key, val);\n            } catch (error) {\n                logger?.error(error.message);\n            }\n        }\n    }\n}\n"]}