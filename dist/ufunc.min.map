{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","node_modules/ramda/dist/ramda.js"],"names":["utils","clean","list","filter","e","cleanAll","cleanObj","obj","cleaned","_ramda2","map","p","pipe","toPairs","fromPairs","cleanObjAll","filterObjetsInList","fn","criteria","search","curry","_this","c","s","fmap","f","container","val","ifElse","left","right","conditions","conditionsBool","Array","isArray","Boolean","some","b","maybe","emptyType","arguments","length","undefined","value","maybeIf","condition","orElse","conditionsToBool","pickKeyValuesFromList","propsList","objectsList","i","pickAll","__","@@functional/placeholder","_arity","n","apply","this","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","Error","_arrayFromIterator","iter","next","done","push","_cloneRegExp","pattern","RegExp","source","global","ignoreCase","multiline","sticky","unicode","_complement","_concat","set1","set2","idx","len1","len2","result","_containsWith","pred","x","len","_curry1","f1","a","_curry2","f2","_curry3","f3","_curryN","received","combined","argsIdx","combinedIdx","_filter","_forceReduced","@@transducer/value","@@transducer/reduced","_functionsWith","key","_has","prop","Object","prototype","hasOwnProperty","call","_identity","_isArguments","toString","_isArray","_isInteger","Number","isInteger","_isNumber","_isObject","_isRegExp","_isString","_isTransformer","_map","functor","_of","_pipe","g","_pipeP","ctx","then","_quote","escaped","replace","_reduced","_slice","args","from","to","Math","max","min","_toISOString","pad","Date","toISOString","d","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","slice","_xdropRepeatsWith","XDropRepeatsWith","xf","lastValue","seenFirstValue","input","sameAsLast","_xfBase","init","_xfilter","XFilter","_xfind","XFind","found","_xfindIndex","XFindIndex","_xfindLast","XFindLast","last","_xfindLastIndex","XFindLastIndex","lastIdx","_xmap","XMap","_xtake","XTake","_xtakeWhile","XTakeWhile","_xwrap","XWrap","acc","add","adjust","start","_idx","_list","always","and","append","el","assoc","assocPath","path","bind","thisObj","comparator","cond","pairs","containsWith","countBy","counts","curryN","dec","defaultTo","v","differenceWith","first","second","out","firstLen","containsPred","dissoc","dissocPath","head","tail","divide","dropLastWhile","empty","constructor","evolve","transformations","object","transformation","type","gt","gte","has","hasIn","identical","identity","onTrue","onFalse","inc","insert","elt","splice","insertAll","elts","is","Ctor","isArrayLike","String","nodeType","isNil","keys","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","contains","item","nIdx","ks","keysIn","NaN","lt","lte","mapAccum","tuple","mapAccumRight","match","rx","str","mathMod","m","maxBy","merge","minBy","modulo","multiply","nAry","negate","not","nth","offset","charAt","nthArg","objOf","of","once","called","or","over","Identity","lens","y","pair","fst","snd","paths","pathOr","pick","names","name","pickBy","test","prepend","propOr","propSatisfies","props","ps","range","TypeError","reduceRight","reduced","remove","count","regex","replacement","reverse","split","join","scan","set","sort","sortBy","aa","bb","subtract","takeLastWhile","Infinity","tap","times","toPairsIn","trim","ws","zeroWidth","hasProtoTrim","beginRx","endRx","unapply","unary","uncurryN","depth","endIdx","currentDepth","unfold","seed","uniqWith","unless","whenFalseFn","update","values","vals","valuesIn","vs","view","Const","when","whenTrueFn","where","spec","testObj","wrap","wrapper","xprod","j","ilen","jlen","zip","rv","zipObj","zipWith","F","T","_aperture","limit","_checkForMethod","methodname","_clone","refFrom","refTo","copy","copiedValue","_createPartialApplicator","concat","_dispatchable","transducer","_equals","stackA","stackB","equals","valueOf","entries","keysA","pop","_makeFlat","recursive","flatt","_reduce","_arrayReduce","_iterableReduce","step","_methodReduce","reduce","symIterator","Symbol","iterator","_xall","XAll","all","_xany","XAny","any","_xaperture","XAperture","pos","full","store","getCopy","_xdrop","XDrop","_xdropWhile","XDropWhile","_xgroupBy","XGroupBy","inputs","addIndex","origFn","aperture","binary","clone","createMapEntry","dropWhile","find","findIndex","findLast","findLastIndex","flatten","flip","forEach","functions","functionsIn","groupBy","intersectionWith","list1","list2","results","intersperse","separator","invert","invertObj","isEmpty","lastIndexOf","target","xs","mapObj","mapObjIndexed","none","partial","partialRight","partition","pathEq","_path","pluck","propEq","propIs","reject","repeat","fromIndex","toIndex","splitEvery","sum","take","takeWhile","transduce","unionWith","uniq","useWith","transformers","whereEq","_flatCat","preservingReduced","@@transducer/init","@@transducer/result","@@transducer/step","ret","rxf","_indexOf","_stepCat","_stepCatArray","_stepCatString","_stepCatObject","_xchain","allPass","preds","allUniq","anyPass","ap","applicative","chain","monad","commuteMap","consF","constructN","Fn","$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","converge","after","fns","context","drop","dropLast","dropRepeatsWith","eqBy","eqProps","obj1","obj2","indexOf","into","isSet","getter","setter","lensIndex","lensProp","k","liftN","arity","lifted","mean","median","width","mergeAll","pipeP","product","project","takeLast","unnest","_contains","_toString","seen","recur","mapPairs","commute","compose","composeK","composeP","construct","difference","dropRepeats","intersection","lift","omit","pipeK","union","uniqBy","appliedItem","applied","both","complement","either","invoker","method","Function","memoize","cache","toLower","toUpper","R","exports","module","define","amd"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\nimport R from 'ramda';\n\nconst utils = {\n  /**\n   * Remove false values from a list, expect 0's\n   * @param  {array} list - List of items to be filtered\n   * @return {array}      - New lsit with false items removed\n   */\n  clean (list) {\n    return list.filter(e => e === 0 ? '0' : e);\n  },\n\n  /**\n   * Removes all false values from a list\n   * @param  {array} list - List of items to be filtered\n   * @return {array}      - New list with false items removed\n   */\n  cleanAll (list) {\n    return list.filter(e => e);\n  },\n\n\n  /**\n   * Removes all false key/values pairs from a list, expect 0's\n   * @param  {object} list - List of items to be filtered\n   * @return {object}      - New list with false items removed\n   */\n  cleanObj (obj) {\n    const cleaned = R.map(p => {\n      if (p[1] != null) {\n        return [p[0], p[1]];\n      }\n    });\n\n    return R.pipe(R.toPairs, cleaned, R.fromPairs)(obj);\n  },\n\n\n  /**\n   * Removes all key/values pairs values from a list\n   * @param  {object} list - List of items to be filtered\n   * @return {object}      - New list with false items removed\n   */\n  cleanObjAll (obj) {\n    const cleaned = R.map(p => {\n      if (p[1] != null && p[1] !== 0) {\n        return [p[0], p[1]];\n      }\n    });\n\n    return R.pipe(R.toPairs, cleaned, R.fromPairs)(obj);\n  },\n\n\n  /**\n  *  Filters a list of objects by using another list of objects as the criteria\n  *  @param  {function}  fn(criteria, search)  Function to filter criteria from searh\n  *  @param  {array}     criteria              List of objects to us as the criteria\n  *  @param  {array}     search                List of objects to be searhed\n  *  @return {array}                           New list of objects with only filterd properties\n  */\n  filterObjetsInList (fn, criteria, search) {\n    return R.curry(() => this.clean(criteria.map(c => search.map(s => fn(c, s)))[0]));\n  },\n\n\n  /**\n  * Maps a function over a container and returns a new container\n  * @param  {function} function to be applied to value\n  * @param  {[object]}\n  * @param  {[type]}\n  * @return {[type]}     value to be mapped\n  */\n  fmap (f, container, val) {\n    if (val == null) {\n      return R.curry(() => container(null));\n    };\n\n    return R.curry(() => container(f(val)));\n  },\n\n\n  /**\n   * xecutes left if any of the condition are true, else right if false.\n   * @param  {any}   left        If true.\n   * @param  {any}   right       If fasle.\n   * @param  {array} conditions  Array of conditions to be evaluated.\n   * @return {any}               Execute left if true else right if false.\n   */\n  ifElse (left, right) {\n    return R.curry((conditions) => {\n      let conditionsBool = Array.isArray(conditions) ? conditions.map(c => Boolean(c)).some(b => b === true) : Boolean(conditions);\n\n      if (conditionsBool) return (typeof left === 'function') ? left() : left;\n\n      return (typeof right === 'function') ? right() : right;\n    });\n  },\n\n\n  /**\n  * Create a container with an immutabe value or returns null if no value passed.\n  * @param  {any}  value      Value to be returned if true.\n  * @param  {any}  emptyType  Value to be returned if false value param is null/undefined. Default is null.\n  * @return {any}             Returns value or emptyType.\n  */\n  maybe (emptyType = null) {\n    return R.curry((value) => value == null ? emptyType : value);\n  },\n\n\n  /**\n  * Create a container with an immutabe value or returns null if no value passed.\n  * @param  {any}    value      Value to be returned if true\n  * @param  {bool}   condition  Condition to be evaluated. Default is false.\n  * @param  {any}    emptyType  Value to be returned if false value param is null/undefined. Default is null\n  * @return {any}               Returns value or emptyType based on condition.\n  */\n  maybeIf (value) {\n    return R.curry((condition = false, emptyType = null) => !condition ? emptyType : value);\n  },\n\n\n  /**\n   * Executes left if condition is true, else right if false'\n   * @param  {any} left       If true.\n   * @param  {any} right      If fasle.\n   * @param  {any} condition  Condition to be evaluated.\n   * @return {any}            Execute left if true else right if false.\n   */\n  orElse (left, right) {\n    return R.curry((conditions) => {\n      const conditionsToBool = conditions.map(c => Boolean(c)).some(b => b === true);\n\n      if (conditionsToBool) return (typeof left === 'function') ? left() : left;\n\n      return (typeof right === 'function') ? right() : right;\n    });\n  },\n\n\n  /**\n  * @param  {array} propsList    List of key name to be picked.\n  * @param  {array} objectsList  List of objects.\n  * @return {array}              New array of objects only containing the picked items.\n  */\n  pickKeyValuesFromList (propsList, objectsList) {\n    return objectsList.map(i => R.pickAll(propsList, i));\n  }\n};\n\n\nexport default utils;\n","//  Ramda v0.18.0\n//  https://github.com/ramda/ramda\n//  (c) 2013-2015 Scott Sauyet, Michael Hurley, and David Chambers\n//  Ramda may be freely distributed under the MIT license.\n\n;(function() {\n\n  'use strict';\n\n  /**\n     * A special placeholder value used to specify \"gaps\" within curried functions,\n     * allowing partial application of any combination of arguments,\n     * regardless of their positions.\n     *\n     * If `g` is a curried ternary function and `_` is `R.__`, the following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2, _)(1, 3)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @constant\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @example\n     *\n     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n     *      greet('Alice'); //=> 'Hello, Alice!'\n     */\n    var __ = { '@@functional/placeholder': true };\n\n    // jshint unused:vars\n    var _arity = function _arity(n, fn) {\n        // jshint unused:vars\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.apply(this, arguments);\n            };\n        case 1:\n            return function (a0) {\n                return fn.apply(this, arguments);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.apply(this, arguments);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.apply(this, arguments);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.apply(this, arguments);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.apply(this, arguments);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.apply(this, arguments);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.apply(this, arguments);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.apply(this, arguments);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.apply(this, arguments);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.apply(this, arguments);\n            };\n        default:\n            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n        }\n    };\n\n    var _arrayFromIterator = function _arrayFromIterator(iter) {\n        var list = [];\n        var next;\n        while (!(next = iter.next()).done) {\n            list.push(next.value);\n        }\n        return list;\n    };\n\n    var _cloneRegExp = function _cloneRegExp(pattern) {\n        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n    };\n\n    var _complement = function _complement(f) {\n        return function () {\n            return !f.apply(this, arguments);\n        };\n    };\n\n    /**\n     * Private `concat` function to merge two array-like objects.\n     *\n     * @private\n     * @param {Array|Arguments} [set1=[]] An array-like object.\n     * @param {Array|Arguments} [set2=[]] An array-like object.\n     * @return {Array} A new, merged array.\n     * @example\n     *\n     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     */\n    var _concat = function _concat(set1, set2) {\n        set1 = set1 || [];\n        set2 = set2 || [];\n        var idx;\n        var len1 = set1.length;\n        var len2 = set2.length;\n        var result = [];\n        idx = 0;\n        while (idx < len1) {\n            result[result.length] = set1[idx];\n            idx += 1;\n        }\n        idx = 0;\n        while (idx < len2) {\n            result[result.length] = set2[idx];\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _containsWith = function _containsWith(pred, x, list) {\n        var idx = 0, len = list.length;\n        while (idx < len) {\n            if (pred(x, list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    };\n\n    /**\n     * Optimized internal one-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry1 = function _curry1(fn) {\n        return function f1(a) {\n            if (arguments.length === 0) {\n                return f1;\n            } else if (a != null && a['@@functional/placeholder'] === true) {\n                return f1;\n            } else {\n                return fn.apply(this, arguments);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal two-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry2 = function _curry2(fn) {\n        return function f2(a, b) {\n            var n = arguments.length;\n            if (n === 0) {\n                return f2;\n            } else if (n === 1 && a != null && a['@@functional/placeholder'] === true) {\n                return f2;\n            } else if (n === 1) {\n                return _curry1(function (b) {\n                    return fn(a, b);\n                });\n            } else if (n === 2 && a != null && a['@@functional/placeholder'] === true && b != null && b['@@functional/placeholder'] === true) {\n                return f2;\n            } else if (n === 2 && a != null && a['@@functional/placeholder'] === true) {\n                return _curry1(function (a) {\n                    return fn(a, b);\n                });\n            } else if (n === 2 && b != null && b['@@functional/placeholder'] === true) {\n                return _curry1(function (b) {\n                    return fn(a, b);\n                });\n            } else {\n                return fn(a, b);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal three-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry3 = function _curry3(fn) {\n        return function f3(a, b, c) {\n            var n = arguments.length;\n            if (n === 0) {\n                return f3;\n            } else if (n === 1 && a != null && a['@@functional/placeholder'] === true) {\n                return f3;\n            } else if (n === 1) {\n                return _curry2(function (b, c) {\n                    return fn(a, b, c);\n                });\n            } else if (n === 2 && a != null && a['@@functional/placeholder'] === true && b != null && b['@@functional/placeholder'] === true) {\n                return f3;\n            } else if (n === 2 && a != null && a['@@functional/placeholder'] === true) {\n                return _curry2(function (a, c) {\n                    return fn(a, b, c);\n                });\n            } else if (n === 2 && b != null && b['@@functional/placeholder'] === true) {\n                return _curry2(function (b, c) {\n                    return fn(a, b, c);\n                });\n            } else if (n === 2) {\n                return _curry1(function (c) {\n                    return fn(a, b, c);\n                });\n            } else if (n === 3 && a != null && a['@@functional/placeholder'] === true && b != null && b['@@functional/placeholder'] === true && c != null && c['@@functional/placeholder'] === true) {\n                return f3;\n            } else if (n === 3 && a != null && a['@@functional/placeholder'] === true && b != null && b['@@functional/placeholder'] === true) {\n                return _curry2(function (a, b) {\n                    return fn(a, b, c);\n                });\n            } else if (n === 3 && a != null && a['@@functional/placeholder'] === true && c != null && c['@@functional/placeholder'] === true) {\n                return _curry2(function (a, c) {\n                    return fn(a, b, c);\n                });\n            } else if (n === 3 && b != null && b['@@functional/placeholder'] === true && c != null && c['@@functional/placeholder'] === true) {\n                return _curry2(function (b, c) {\n                    return fn(a, b, c);\n                });\n            } else if (n === 3 && a != null && a['@@functional/placeholder'] === true) {\n                return _curry1(function (a) {\n                    return fn(a, b, c);\n                });\n            } else if (n === 3 && b != null && b['@@functional/placeholder'] === true) {\n                return _curry1(function (b) {\n                    return fn(a, b, c);\n                });\n            } else if (n === 3 && c != null && c['@@functional/placeholder'] === true) {\n                return _curry1(function (c) {\n                    return fn(a, b, c);\n                });\n            } else {\n                return fn(a, b, c);\n            }\n        };\n    };\n\n    /**\n     * Internal curryN function.\n     *\n     * @private\n     * @category Function\n     * @param {Number} length The arity of the curried function.\n     * @return {array} An array of arguments received thus far.\n     * @param {Function} fn The function to curry.\n     */\n    var _curryN = function _curryN(length, received, fn) {\n        return function () {\n            var combined = [];\n            var argsIdx = 0;\n            var left = length;\n            var combinedIdx = 0;\n            while (combinedIdx < received.length || argsIdx < arguments.length) {\n                var result;\n                if (combinedIdx < received.length && (received[combinedIdx] == null || received[combinedIdx]['@@functional/placeholder'] !== true || argsIdx >= arguments.length)) {\n                    result = received[combinedIdx];\n                } else {\n                    result = arguments[argsIdx];\n                    argsIdx += 1;\n                }\n                combined[combinedIdx] = result;\n                if (result == null || result['@@functional/placeholder'] !== true) {\n                    left -= 1;\n                }\n                combinedIdx += 1;\n            }\n            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n        };\n    };\n\n    var _filter = function _filter(fn, list) {\n        var idx = 0, len = list.length, result = [];\n        while (idx < len) {\n            if (fn(list[idx])) {\n                result[result.length] = list[idx];\n            }\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _forceReduced = function _forceReduced(x) {\n        return {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    /**\n     * @private\n     * @param {Function} fn The strategy for extracting function names from an object\n     * @return {Function} A function that takes an object and returns an array of function names.\n     */\n    var _functionsWith = function _functionsWith(fn) {\n        return function (obj) {\n            return _filter(function (key) {\n                return typeof obj[key] === 'function';\n            }, fn(obj));\n        };\n    };\n\n    var _has = function _has(prop, obj) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    };\n\n    var _identity = function _identity(x) {\n        return x;\n    };\n\n    var _isArguments = function () {\n        var toString = Object.prototype.toString;\n        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n            return toString.call(x) === '[object Arguments]';\n        } : function _isArguments(x) {\n            return _has('callee', x);\n        };\n    }();\n\n    /**\n     * Tests whether or not an object is an array.\n     *\n     * @private\n     * @param {*} val The object to test.\n     * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n     * @example\n     *\n     *      _isArray([]); //=> true\n     *      _isArray(null); //=> false\n     *      _isArray({}); //=> false\n     */\n    var _isArray = Array.isArray || function _isArray(val) {\n        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n    };\n\n    /**\n     * Determine if the passed argument is an integer.\n     *\n     * @private\n     * @param {*} n\n     * @category Type\n     * @return {Boolean}\n     */\n    var _isInteger = Number.isInteger || function _isInteger(n) {\n        return n << 0 === n;\n    };\n\n    var _isNumber = function _isNumber(x) {\n        return Object.prototype.toString.call(x) === '[object Number]';\n    };\n\n    var _isObject = function _isObject(x) {\n        return Object.prototype.toString.call(x) === '[object Object]';\n    };\n\n    var _isRegExp = function _isRegExp(x) {\n        return Object.prototype.toString.call(x) === '[object RegExp]';\n    };\n\n    var _isString = function _isString(x) {\n        return Object.prototype.toString.call(x) === '[object String]';\n    };\n\n    var _isTransformer = function _isTransformer(obj) {\n        return typeof obj['@@transducer/step'] === 'function';\n    };\n\n    var _map = function _map(fn, functor) {\n        var idx = 0;\n        var len = functor.length;\n        var result = Array(len);\n        while (idx < len) {\n            result[idx] = fn(functor[idx]);\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _of = function _of(x) {\n        return [x];\n    };\n\n    var _pipe = function _pipe(f, g) {\n        return function () {\n            return g.call(this, f.apply(this, arguments));\n        };\n    };\n\n    var _pipeP = function _pipeP(f, g) {\n        return function () {\n            var ctx = this;\n            return f.apply(ctx, arguments).then(function (x) {\n                return g.call(ctx, x);\n            });\n        };\n    };\n\n    // \\b matches word boundary; [\\b] matches backspace\n    var _quote = function _quote(s) {\n        var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b')    // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n        return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n    };\n\n    var _reduced = function _reduced(x) {\n        return x && x['@@transducer/reduced'] ? x : {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    /**\n     * An optimized, private array `slice` implementation.\n     *\n     * @private\n     * @param {Arguments|Array} args The array or arguments object to consider.\n     * @param {Number} [from=0] The array index to slice from, inclusive.\n     * @param {Number} [to=args.length] The array index to slice to, exclusive.\n     * @return {Array} A new, sliced array.\n     * @example\n     *\n     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n     *\n     *      var firstThreeArgs = function(a, b, c, d) {\n     *        return _slice(arguments, 0, 3);\n     *      };\n     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n     */\n    var _slice = function _slice(args, from, to) {\n        switch (arguments.length) {\n        case 1:\n            return _slice(args, 0, args.length);\n        case 2:\n            return _slice(args, from, args.length);\n        default:\n            var list = [];\n            var idx = 0;\n            var len = Math.max(0, Math.min(args.length, to) - from);\n            while (idx < len) {\n                list[idx] = args[from + idx];\n                idx += 1;\n            }\n            return list;\n        }\n    };\n\n    /**\n     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n     */\n    var _toISOString = function () {\n        var pad = function pad(n) {\n            return (n < 10 ? '0' : '') + n;\n        };\n        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n            return d.toISOString();\n        } : function _toISOString(d) {\n            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n        };\n    }();\n\n    var _xdropRepeatsWith = function () {\n        function XDropRepeatsWith(pred, xf) {\n            this.xf = xf;\n            this.pred = pred;\n            this.lastValue = undefined;\n            this.seenFirstValue = false;\n        }\n        XDropRepeatsWith.prototype['@@transducer/init'] = function () {\n            return this.xf['@@transducer/init']();\n        };\n        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n            var sameAsLast = false;\n            if (!this.seenFirstValue) {\n                this.seenFirstValue = true;\n            } else if (this.pred(this.lastValue, input)) {\n                sameAsLast = true;\n            }\n            this.lastValue = input;\n            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropRepeatsWith(pred, xf) {\n            return new XDropRepeatsWith(pred, xf);\n        });\n    }();\n\n    var _xfBase = {\n        init: function () {\n            return this.xf['@@transducer/init']();\n        },\n        result: function (result) {\n            return this.xf['@@transducer/result'](result);\n        }\n    };\n\n    var _xfilter = function () {\n        function XFilter(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFilter.prototype['@@transducer/init'] = _xfBase.init;\n        XFilter.prototype['@@transducer/result'] = _xfBase.result;\n        XFilter.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n        };\n        return _curry2(function _xfilter(f, xf) {\n            return new XFilter(f, xf);\n        });\n    }();\n\n    var _xfind = function () {\n        function XFind(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.found = false;\n        }\n        XFind.prototype['@@transducer/init'] = _xfBase.init;\n        XFind.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, void 0);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFind.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, input));\n            }\n            return result;\n        };\n        return _curry2(function _xfind(f, xf) {\n            return new XFind(f, xf);\n        });\n    }();\n\n    var _xfindIndex = function () {\n        function XFindIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.found = false;\n        }\n        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindIndex.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, -1);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n            }\n            return result;\n        };\n        return _curry2(function _xfindIndex(f, xf) {\n            return new XFindIndex(f, xf);\n        });\n    }();\n\n    var _xfindLast = function () {\n        function XFindLast(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLast.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n        };\n        XFindLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.last = input;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLast(f, xf) {\n            return new XFindLast(f, xf);\n        });\n    }();\n\n    var _xfindLastIndex = function () {\n        function XFindLastIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.lastIdx = -1;\n        }\n        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n        };\n        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.lastIdx = this.idx;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLastIndex(f, xf) {\n            return new XFindLastIndex(f, xf);\n        });\n    }();\n\n    var _xmap = function () {\n        function XMap(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XMap.prototype['@@transducer/init'] = _xfBase.init;\n        XMap.prototype['@@transducer/result'] = _xfBase.result;\n        XMap.prototype['@@transducer/step'] = function (result, input) {\n            return this.xf['@@transducer/step'](result, this.f(input));\n        };\n        return _curry2(function _xmap(f, xf) {\n            return new XMap(f, xf);\n        });\n    }();\n\n    var _xtake = function () {\n        function XTake(n, xf) {\n            this.xf = xf;\n            this.n = n;\n        }\n        XTake.prototype['@@transducer/init'] = _xfBase.init;\n        XTake.prototype['@@transducer/result'] = _xfBase.result;\n        XTake.prototype['@@transducer/step'] = function (result, input) {\n            if (this.n === 0) {\n                return _reduced(result);\n            } else {\n                this.n -= 1;\n                return this.xf['@@transducer/step'](result, input);\n            }\n        };\n        return _curry2(function _xtake(n, xf) {\n            return new XTake(n, xf);\n        });\n    }();\n\n    var _xtakeWhile = function () {\n        function XTakeWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n        };\n        return _curry2(function _xtakeWhile(f, xf) {\n            return new XTakeWhile(f, xf);\n        });\n    }();\n\n    var _xwrap = function () {\n        function XWrap(fn) {\n            this.f = fn;\n        }\n        XWrap.prototype['@@transducer/init'] = function () {\n            throw new Error('init not implemented on XWrap');\n        };\n        XWrap.prototype['@@transducer/result'] = function (acc) {\n            return acc;\n        };\n        XWrap.prototype['@@transducer/step'] = function (acc, x) {\n            return this.f(acc, x);\n        };\n        return function _xwrap(fn) {\n            return new XWrap(fn);\n        };\n    }();\n\n    /**\n     * Adds two numbers. Equivalent to `a + b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Number}\n     * @see R.subtract\n     * @example\n     *\n     *      R.add(2, 3);       //=>  5\n     *      R.add(7)(10);      //=> 17\n     */\n    var add = _curry2(function add(a, b) {\n        return a + b;\n    });\n\n    /**\n     * Applies a function to the value at the given index of an array,\n     * returning a new copy of the array with the element at the given\n     * index replaced with the result of the function application.\n     * @see R.update\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a -> a) -> Number -> [a] -> [a]\n     * @param {Function} fn The function to apply.\n     * @param {Number} idx The index.\n     * @param {Array|Arguments} list An array-like object whose value\n     *        at the supplied index will be replaced.\n     * @return {Array} A copy of the supplied array-like object with\n     *         the element at index `idx` replaced with the value\n     *         returned by applying `fn` to the existing element.\n     * @example\n     *\n     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var adjust = _curry3(function adjust(fn, idx, list) {\n        if (idx >= list.length || idx < -list.length) {\n            return list;\n        }\n        var start = idx < 0 ? list.length : 0;\n        var _idx = start + idx;\n        var _list = _concat(list);\n        _list[_idx] = fn(list[_idx]);\n        return _list;\n    });\n\n    /**\n     * Returns a function that always returns the given value. Note that for\n     * non-primitives the value returned is a reference to the original value.\n     *\n     * This function is known as `const`, `constant`, or `K` (for K combinator)\n     * in other languages and libraries.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> (* -> a)\n     * @param {*} val The value to wrap in a function\n     * @return {Function} A Function :: * -> val.\n     * @example\n     *\n     *      var t = R.always('Tee');\n     *      t(); //=> 'Tee'\n     */\n    var always = _curry1(function always(val) {\n        return function () {\n            return val;\n        };\n    });\n\n    /**\n     * Returns `true` if both arguments are `true`; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise\n     * @see R.both\n     * @example\n     *\n     *      R.and(true, true); //=> true\n     *      R.and(true, false); //=> false\n     *      R.and(false, true); //=> false\n     *      R.and(false, false); //=> false\n     */\n    var and = _curry2(function and(a, b) {\n        return a && b;\n    });\n\n    /**\n     * Returns a new list containing the contents of the given list, followed by the given\n     * element.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The element to add to the end of the new list.\n     * @param {Array} list The list whose contents will be added to the beginning of the output\n     *        list.\n     * @return {Array} A new list containing the contents of the old list followed by `el`.\n     * @see R.prepend\n     * @example\n     *\n     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n     *      R.append('tests', []); //=> ['tests']\n     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n     */\n    var append = _curry2(function append(el, list) {\n        return _concat(list, [el]);\n    });\n\n    /**\n     * Applies function `fn` to the argument list `args`. This is useful for\n     * creating a fixed-arity function from a variadic function. `fn` should\n     * be a bound function if context is significant.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> a) -> [*] -> a\n     * @param {Function} fn\n     * @param {Array} args\n     * @return {*}\n     * @see R.call, R.unapply\n     * @example\n     *\n     *      var nums = [1, 2, 3, -99, 42, 6, 7];\n     *      R.apply(Math.max, nums); //=> 42\n     */\n    var apply = _curry2(function apply(fn, args) {\n        return fn.apply(this, args);\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the specified\n     * property with the given value.  Note that this copies and flattens\n     * prototype properties onto the new object as well.  All non-primitive\n     * properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig String -> a -> {k: v} -> {k: v}\n     * @param {String} prop the property name to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except for the specified property.\n     * @see R.dissoc\n     * @example\n     *\n     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n     */\n    var assoc = _curry3(function assoc(prop, val, obj) {\n        var result = {};\n        for (var p in obj) {\n            result[p] = obj[p];\n        }\n        result[prop] = val;\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the nodes\n     * required to create the given path, and placing the specific value at the\n     * tail end of that path.  Note that this copies and flattens prototype\n     * properties onto the new object as well.  All non-primitive properties\n     * are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig [String] -> a -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except along the specified path.\n     * @see R.dissocPath\n     * @example\n     *\n     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n     */\n    var assocPath = _curry3(function assocPath(path, val, obj) {\n        switch (path.length) {\n        case 0:\n            return obj;\n        case 1:\n            return assoc(path[0], val, obj);\n        default:\n            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);\n        }\n    });\n\n    /**\n     * Creates a function that is bound to a context.\n     * Note: `R.bind` does not provide the additional argument-binding capabilities of\n     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @category Object\n     * @see R.partial\n     * @sig (* -> *) -> {*} -> (* -> *)\n     * @param {Function} fn The function to bind to context\n     * @param {Object} thisObj The context to bind `fn` to\n     * @return {Function} A function that will execute in the context of `thisObj`.\n     */\n    var bind = _curry2(function bind(fn, thisObj) {\n        return _arity(fn.length, function () {\n            return fn.apply(thisObj, arguments);\n        });\n    });\n\n    /**\n     * Makes a comparator function out of a function that reports whether the first element is less than the second.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a, b -> Boolean) -> (a, b -> Number)\n     * @param {Function} pred A predicate function of arity two.\n     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.\n     * @example\n     *\n     *      var cmp = R.comparator((a, b) => a.age < b.age);\n     *      var people = [\n     *        // ...\n     *      ];\n     *      R.sort(cmp, people);\n     */\n    var comparator = _curry1(function comparator(pred) {\n        return function (a, b) {\n            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n        };\n    });\n\n    /**\n     * Returns a function, `fn`, which encapsulates if/else-if/else logic.\n     * `R.cond` takes a list of [predicate, transform] pairs. All of the\n     * arguments to `fn` are applied to each of the predicates in turn\n     * until one returns a \"truthy\" value, at which point `fn` returns the\n     * result of applying its arguments to the corresponding transformer.\n     * If none of the predicates matches, `fn` returns undefined.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Logic\n     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n     * @param {Array} pairs\n     * @return {Function}\n     * @example\n     *\n     *      var fn = R.cond([\n     *        [R.equals(0),   R.always('water freezes at 0°C')],\n     *        [R.equals(100), R.always('water boils at 100°C')],\n     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n     *      ]);\n     *      fn(0); //=> 'water freezes at 0°C'\n     *      fn(50); //=> 'nothing special happens at 50°C'\n     *      fn(100); //=> 'water boils at 100°C'\n     */\n    var cond = _curry1(function cond(pairs) {\n        return function () {\n            var idx = 0;\n            while (idx < pairs.length) {\n                if (pairs[idx][0].apply(this, arguments)) {\n                    return pairs[idx][1].apply(this, arguments);\n                }\n                idx += 1;\n            }\n        };\n    });\n\n    /**\n     * Returns `true` if the `x` is found in the `list`, using `pred` as an\n     * equality predicate for `x`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.5\n     * @category List\n     * @sig (a, a -> Boolean) -> a -> [a] -> Boolean\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {*} x The item to find\n     * @param {Array} list The list to iterate over\n     * @return {Boolean} `true` if `x` is in `list`, else `false`.\n     * @deprecated since v0.18.0\n     * @example\n     *\n     *      var absEq = (a, b) => Math.abs(a) === Math.abs(b);\n     *      R.containsWith(absEq, 5, [1, 2, 3]); //=> false\n     *      R.containsWith(absEq, 5, [4, 5, 6]); //=> true\n     *      R.containsWith(absEq, 5, [-1, -2, -3]); //=> false\n     *      R.containsWith(absEq, 5, [-4, -5, -6]); //=> true\n     */\n    var containsWith = _curry3(_containsWith);\n\n    /**\n     * Counts the elements of a list according to how many match each value\n     * of a key generated by the supplied function. Returns an object\n     * mapping the keys produced by `fn` to the number of occurrences in\n     * the list. Note that all keys are coerced to strings because of how\n     * JavaScript objects work.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> String) -> [a] -> {*}\n     * @param {Function} fn The function used to map values to keys.\n     * @param {Array} list The list to count elements from.\n     * @return {Object} An object mapping keys to number of occurrences in the list.\n     * @example\n     *\n     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n     *      var letters = R.split('', 'abcABCaaaBBc');\n     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}\n     */\n    var countBy = _curry2(function countBy(fn, list) {\n        var counts = {};\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            var key = fn(list[idx]);\n            counts[key] = (_has(key, counts) ? counts[key] : 0) + 1;\n            idx += 1;\n        }\n        return counts;\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function, with the\n     * specified arity. The curried function has two unusual capabilities.\n     * First, its arguments needn't be provided one at a time. If `g` is\n     * `R.curryN(3, f)`, the following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`,\n     * the following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curry\n     * @example\n     *\n     *      var sumArgs = (...args) => R.sum(args);\n     *\n     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curryN = _curry2(function curryN(length, fn) {\n        if (length === 1) {\n            return _curry1(fn);\n        }\n        return _arity(length, _curryN(length, [], fn));\n    });\n\n    /**\n     * Decrements its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.inc\n     * @example\n     *\n     *      R.dec(42); //=> 41\n     */\n    var dec = add(-1);\n\n    /**\n     * Returns the second argument if it is not `null`, `undefined` or `NaN`\n     * otherwise the first argument is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Logic\n     * @sig a -> b -> a | b\n     * @param {a} val The default value.\n     * @param {b} val The value to return if it is not null or undefined\n     * @return {*} The the second value or the default value\n     * @example\n     *\n     *      var defaultTo42 = R.defaultTo(42);\n     *\n     *      defaultTo42(null);  //=> 42\n     *      defaultTo42(undefined);  //=> 42\n     *      defaultTo42('Ramda');  //=> 'Ramda'\n     *      defaultTo42(parseInt('string')); //=> 42\n     */\n    var defaultTo = _curry2(function defaultTo(d, v) {\n        return v == null || v !== v ? d : v;\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not contained in the second list.\n     * Duplication is determined according to the value returned by applying the supplied predicate to two list\n     * elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a,a -> Boolean) -> [a] -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @see R.difference\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @example\n     *\n     *      function cmp(x, y) => x.a === y.a;\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n     *      var l2 = [{a: 3}, {a: 4}];\n     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n     */\n    var differenceWith = _curry3(function differenceWith(pred, first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        var containsPred = containsWith(pred);\n        while (idx < firstLen) {\n            if (!containsPred(first[idx], second) && !containsPred(first[idx], out)) {\n                out[out.length] = first[idx];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object that does not contain a `prop` property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Object\n     * @sig String -> {k: v} -> {k: v}\n     * @param {String} prop the name of the property to dissociate\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original but without the specified property\n     * @see R.assoc\n     * @example\n     *\n     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n     */\n    var dissoc = _curry2(function dissoc(prop, obj) {\n        var result = {};\n        for (var p in obj) {\n            if (p !== prop) {\n                result[p] = obj[p];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, omitting the property at the\n     * given path. Note that this copies and flattens prototype properties\n     * onto the new object as well.  All non-primitive properties are copied\n     * by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.11.0\n     * @category Object\n     * @sig [String] -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object without the property at path\n     * @see R.assocPath\n     * @example\n     *\n     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n     */\n    var dissocPath = _curry2(function dissocPath(path, obj) {\n        switch (path.length) {\n        case 0:\n            return obj;\n        case 1:\n            return dissoc(path[0], obj);\n        default:\n            var head = path[0];\n            var tail = _slice(path, 1);\n            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);\n        }\n    });\n\n    /**\n     * Divides two numbers. Equivalent to `a / b`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a / b`.\n     * @see R.multiply\n     * @example\n     *\n     *      R.divide(71, 100); //=> 0.71\n     *\n     *      var half = R.divide(R.__, 2);\n     *      half(42); //=> 21\n     *\n     *      var reciprocal = R.divide(1);\n     *      reciprocal(4);   //=> 0.25\n     */\n    var divide = _curry2(function divide(a, b) {\n        return a / b;\n    });\n\n    /**\n     * Returns a new list containing all but last the`n` elements of a given list,\n     * passing each value from the right to the supplied predicate function, skipping\n     * elements while the predicate function returns `true`. The predicate function\n     * is passed one argument: (value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeLastWhile\n     * @example\n     *\n     *      var lteThree = x => x <= 3;\n     *\n     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n     */\n    var dropLastWhile = _curry2(function dropLastWhile(pred, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && pred(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, 0, idx + 1);\n    });\n\n    /**\n     * Returns the empty value of its argument's type. Ramda defines the empty\n     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments.\n     * Other types are supported if they define `<Type>.empty` and/or\n     * `<Type>.prototype.empty`.\n     *\n     * Dispatches to the `empty` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x\n     * @return {*}\n     * @example\n     *\n     *      R.empty(Just(42));      //=> Nothing()\n     *      R.empty([1, 2, 3]);     //=> []\n     *      R.empty('unicorns');    //=> ''\n     *      R.empty({x: 1, y: 2});  //=> {}\n     */\n    // else\n    var empty = _curry1(function empty(x) {\n        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n            return arguments;\n        }() : // else\n        void 0;\n    });\n\n    /**\n     * Creates a new object by recursively evolving a shallow copy of `object`, according to the\n     * `transformation` functions. All non-primitive properties are copied by reference.\n     *\n     * A `transformation` function will not be invoked if its corresponding key does not exist in\n     * the evolved object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n     * @param {Object} transformations The object specifying transformation functions to apply\n     *        to the object.\n     * @param {Object} object The object to be transformed.\n     * @return {Object} The transformed object.\n     * @example\n     *\n     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n     *      var transformations = {\n     *        firstName: R.trim,\n     *        lastName: R.trim, // Will not get invoked.\n     *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n     *      };\n     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n     */\n    var evolve = _curry2(function evolve(transformations, object) {\n        var transformation, key, type, result = {};\n        for (key in object) {\n            transformation = transformations[key];\n            type = typeof transformation;\n            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];\n        }\n        return result;\n    });\n\n    /**\n     * Creates a new object out of a list key-value pairs.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [[k,v]] -> {k: v}\n     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n     * @return {Object} The object made by pairing up `keys` and `values`.\n     * @see R.toPairs, R.pair\n     * @example\n     *\n     *      R.fromPairs([['a', 1], ['b', 2],  ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n     */\n    var fromPairs = _curry1(function fromPairs(pairs) {\n        var idx = 0, len = pairs.length, out = {};\n        while (idx < len) {\n            if (_isArray(pairs[idx]) && pairs[idx].length) {\n                out[pairs[idx][0]] = pairs[idx][1];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.lt\n     * @example\n     *\n     *      R.gt(2, 1); //=> true\n     *      R.gt(2, 2); //=> false\n     *      R.gt(2, 3); //=> false\n     *      R.gt('a', 'z'); //=> false\n     *      R.gt('z', 'a'); //=> true\n     */\n    var gt = _curry2(function gt(a, b) {\n        return a > b;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.lte\n     * @example\n     *\n     *      R.gte(2, 1); //=> true\n     *      R.gte(2, 2); //=> true\n     *      R.gte(2, 3); //=> false\n     *      R.gte('a', 'z'); //=> false\n     *      R.gte('z', 'a'); //=> true\n     */\n    var gte = _curry2(function gte(a, b) {\n        return a >= b;\n    });\n\n    /**\n     * Returns whether or not an object has an own property with\n     * the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      var hasName = R.has('name');\n     *      hasName({name: 'alice'});   //=> true\n     *      hasName({name: 'bob'});     //=> true\n     *      hasName({});                //=> false\n     *\n     *      var point = {x: 0, y: 0};\n     *      var pointHas = R.has(R.__, point);\n     *      pointHas('x');  //=> true\n     *      pointHas('y');  //=> true\n     *      pointHas('z');  //=> false\n     */\n    var has = _curry2(_has);\n\n    /**\n     * Returns whether or not an object or its prototype chain has\n     * a property with the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      function Rectangle(width, height) {\n     *        this.width = width;\n     *        this.height = height;\n     *      }\n     *      Rectangle.prototype.area = function() {\n     *        return this.width * this.height;\n     *      };\n     *\n     *      var square = new Rectangle(2, 2);\n     *      R.hasIn('width', square);  //=> true\n     *      R.hasIn('area', square);  //=> true\n     */\n    var hasIn = _curry2(function hasIn(prop, obj) {\n        return prop in obj;\n    });\n\n    /**\n     * Returns true if its arguments are identical, false otherwise. Values are\n     * identical if they reference the same memory. `NaN` is identical to `NaN`;\n     * `0` and `-0` are not identical.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      var o = {};\n     *      R.identical(o, o); //=> true\n     *      R.identical(1, 1); //=> true\n     *      R.identical(1, '1'); //=> false\n     *      R.identical([], []); //=> false\n     *      R.identical(0, -0); //=> false\n     *      R.identical(NaN, NaN); //=> true\n     */\n    // SameValue algorithm\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Step 6.a: NaN == NaN\n    var identical = _curry2(function identical(a, b) {\n        // SameValue algorithm\n        if (a === b) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return a !== 0 || 1 / a === 1 / b;\n        } else {\n            // Step 6.a: NaN == NaN\n            return a !== a && b !== b;\n        }\n    });\n\n    /**\n     * A function that does nothing but return the parameter supplied to it. Good as a default\n     * or placeholder function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x The value to return.\n     * @return {*} The input value, `x`.\n     * @example\n     *\n     *      R.identity(1); //=> 1\n     *\n     *      var obj = {};\n     *      R.identity(obj) === obj; //=> true\n     */\n    var identity = _curry1(_identity);\n\n    /**\n     * Creates a function that will process either the `onTrue` or the `onFalse` function depending\n     * upon the result of the `condition` predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Logic\n     * @see R.unless, R.when\n     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n     * @param {Function} condition A predicate function\n     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n     *                    function depending upon the result of the `condition` predicate.\n     * @example\n     *\n     *      var incCount = R.ifElse(\n     *        R.has('count'),\n     *        R.over(R.lensProp('count'), R.inc),\n     *        R.assoc('count', 1)\n     *      );\n     *      incCount({});           //=> { count: 1 }\n     *      incCount({ count: 1 }); //=> { count: 2 }\n     */\n    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n        });\n    });\n\n    /**\n     * Increments its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.dec\n     * @example\n     *\n     *      R.inc(42); //=> 43\n     */\n    var inc = add(1);\n\n    /**\n     * Inserts the supplied element into the list, at index `index`.  _Note\n     * that this is not destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} index The position to insert the element\n     * @param {*} elt The element to insert into the Array\n     * @param {Array} list The list to insert into\n     * @return {Array} A new Array with `elt` inserted at `index`.\n     * @example\n     *\n     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n     */\n    var insert = _curry3(function insert(idx, elt, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        var result = _slice(list);\n        result.splice(idx, 0, elt);\n        return result;\n    });\n\n    /**\n     * Inserts the sub-list into the list, at index `index`.  _Note  that this\n     * is not destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig Number -> [a] -> [a] -> [a]\n     * @param {Number} index The position to insert the sub-list\n     * @param {Array} elts The sub-list to insert into the Array\n     * @param {Array} list The list to insert the sub-list into\n     * @return {Array} A new Array with `elts` inserted starting at `index`.\n     * @example\n     *\n     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n     */\n    var insertAll = _curry3(function insertAll(idx, elts, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));\n    });\n\n    /**\n     * See if an object (`val`) is an instance of the supplied constructor.\n     * This function will check up the inheritance chain, if any.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Type\n     * @sig (* -> {*}) -> a -> Boolean\n     * @param {Object} ctor A constructor\n     * @param {*} val The value to test\n     * @return {Boolean}\n     * @example\n     *\n     *      R.is(Object, {}); //=> true\n     *      R.is(Number, 1); //=> true\n     *      R.is(Object, 1); //=> false\n     *      R.is(String, 's'); //=> true\n     *      R.is(String, new String('')); //=> true\n     *      R.is(Object, new String('')); //=> true\n     *      R.is(Object, 's'); //=> false\n     *      R.is(Number, {}); //=> false\n     */\n    var is = _curry2(function is(Ctor, val) {\n        return val != null && val.constructor === Ctor || val instanceof Ctor;\n    });\n\n    /**\n     * Tests whether or not an object is similar to an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Type\n     * @category List\n     * @sig * -> Boolean\n     * @param {*} x The object to test.\n     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n     * @example\n     *\n     *      R.isArrayLike([]); //=> true\n     *      R.isArrayLike(true); //=> false\n     *      R.isArrayLike({}); //=> false\n     *      R.isArrayLike({length: 10}); //=> false\n     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n     */\n    var isArrayLike = _curry1(function isArrayLike(x) {\n        if (_isArray(x)) {\n            return true;\n        }\n        if (!x) {\n            return false;\n        }\n        if (typeof x !== 'object') {\n            return false;\n        }\n        if (x instanceof String) {\n            return false;\n        }\n        if (x.nodeType === 1) {\n            return !!x.length;\n        }\n        if (x.length === 0) {\n            return true;\n        }\n        if (x.length > 0) {\n            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n        }\n        return false;\n    });\n\n    /**\n     * Checks if the input value is `null` or `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Type\n     * @sig * -> Boolean\n     * @param {*} x The value to test.\n     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n     * @example\n     *\n     *      R.isNil(null); //=> true\n     *      R.isNil(undefined); //=> true\n     *      R.isNil(0); //=> false\n     *      R.isNil([]); //=> false\n     */\n    var isNil = _curry1(function isNil(x) {\n        return x == null;\n    });\n\n    /**\n     * Returns a list containing the names of all the enumerable own\n     * properties of the supplied object.\n     * Note that the order of the output array is not guaranteed to be\n     * consistent across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own properties.\n     * @example\n     *\n     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n     */\n    // cover IE < 9 keys issues\n    var keys = function () {\n        // cover IE < 9 keys issues\n        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');\n        var nonEnumerableProps = [\n            'constructor',\n            'valueOf',\n            'isPrototypeOf',\n            'toString',\n            'propertyIsEnumerable',\n            'hasOwnProperty',\n            'toLocaleString'\n        ];\n        var contains = function contains(list, item) {\n            var idx = 0;\n            while (idx < list.length) {\n                if (list[idx] === item) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        };\n        return typeof Object.keys === 'function' ? _curry1(function keys(obj) {\n            return Object(obj) !== obj ? [] : Object.keys(obj);\n        }) : _curry1(function keys(obj) {\n            if (Object(obj) !== obj) {\n                return [];\n            }\n            var prop, ks = [], nIdx;\n            for (prop in obj) {\n                if (_has(prop, obj)) {\n                    ks[ks.length] = prop;\n                }\n            }\n            if (hasEnumBug) {\n                nIdx = nonEnumerableProps.length - 1;\n                while (nIdx >= 0) {\n                    prop = nonEnumerableProps[nIdx];\n                    if (_has(prop, obj) && !contains(ks, prop)) {\n                        ks[ks.length] = prop;\n                    }\n                    nIdx -= 1;\n                }\n            }\n            return ks;\n        });\n    }();\n\n    /**\n     * Returns a list containing the names of all the\n     * properties of the supplied object, including prototype properties.\n     * Note that the order of the output array is not guaranteed to be\n     * consistent across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.keysIn(f); //=> ['x', 'y']\n     */\n    var keysIn = _curry1(function keysIn(obj) {\n        var prop, ks = [];\n        for (prop in obj) {\n            ks[ks.length] = prop;\n        }\n        return ks;\n    });\n\n    /**\n     * Returns the number of elements in the array by returning `list.length`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [a] -> Number\n     * @param {Array} list The array to inspect.\n     * @return {Number} The length of the array.\n     * @example\n     *\n     *      R.length([]); //=> 0\n     *      R.length([1, 2, 3]); //=> 3\n     */\n    var length = _curry1(function length(list) {\n        return list != null && is(Number, list.length) ? list.length : NaN;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.gt\n     * @example\n     *\n     *      R.lt(2, 1); //=> false\n     *      R.lt(2, 2); //=> false\n     *      R.lt(2, 3); //=> true\n     *      R.lt('a', 'z'); //=> true\n     *      R.lt('z', 'a'); //=> false\n     */\n    var lt = _curry2(function lt(a, b) {\n        return a < b;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.gte\n     * @example\n     *\n     *      R.lte(2, 1); //=> false\n     *      R.lte(2, 2); //=> true\n     *      R.lte(2, 3); //=> true\n     *      R.lte('a', 'z'); //=> true\n     *      R.lte('z', 'a'); //=> false\n     */\n    var lte = _curry2(function lte(a, b) {\n        return a <= b;\n    });\n\n    /**\n     * The mapAccum function behaves like a combination of map and reduce; it applies a\n     * function to each element of a list, passing an accumulating parameter from left to\n     * right, and returning a final value of this accumulator together with the new list.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should return\n     * a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var append = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccum(append, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n     */\n    var mapAccum = _curry3(function mapAccum(fn, acc, list) {\n        var idx = 0, len = list.length, result = [], tuple = [acc];\n        while (idx < len) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx += 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * The mapAccumRight function behaves like a combination of map and reduce; it applies a\n     * function to each element of a list, passing an accumulating parameter from right\n     * to left, and returning a final value of this accumulator together with the new list.\n     *\n     * Similar to `mapAccum`, except moves through the input list from the right to the\n     * left.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should return\n     * a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var append = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]\n     */\n    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n        var idx = list.length - 1, result = [], tuple = [acc];\n        while (idx >= 0) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx -= 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * Tests a regular expression against a String. Note that this function\n     * will return an empty array when there are no matches. This differs\n     * from [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n     * which returns `null` when there are no matches.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @see R.test\n     * @category String\n     * @sig RegExp -> String -> [String | Undefined]\n     * @param {RegExp} rx A regular expression.\n     * @param {String} str The string to match against\n     * @return {Array} The list of matches or empty array.\n     * @example\n     *\n     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n     *      R.match(/a/, 'b'); //=> []\n     *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n     */\n    var match = _curry2(function match(rx, str) {\n        return str.match(rx) || [];\n    });\n\n    /**\n     * mathMod behaves like the modulo operator should mathematically, unlike the `%`\n     * operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\n     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\n     * when the modulus is zero or negative.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} m The dividend.\n     * @param {Number} p the modulus.\n     * @return {Number} The result of `b mod a`.\n     * @example\n     *\n     *      R.mathMod(-17, 5);  //=> 3\n     *      R.mathMod(17, 5);   //=> 2\n     *      R.mathMod(17, -5);  //=> NaN\n     *      R.mathMod(17, 0);   //=> NaN\n     *      R.mathMod(17.2, 5); //=> NaN\n     *      R.mathMod(17, 5.3); //=> NaN\n     *\n     *      var clock = R.mathMod(R.__, 12);\n     *      clock(15); //=> 3\n     *      clock(24); //=> 0\n     *\n     *      var seventeenMod = R.mathMod(17);\n     *      seventeenMod(3);  //=> 2\n     *      seventeenMod(4);  //=> 1\n     *      seventeenMod(10); //=> 7\n     */\n    var mathMod = _curry2(function mathMod(m, p) {\n        if (!_isInteger(m)) {\n            return NaN;\n        }\n        if (!_isInteger(p) || p < 1) {\n            return NaN;\n        }\n        return (m % p + p) % p;\n    });\n\n    /**\n     * Returns the larger of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.maxBy, R.min\n     * @example\n     *\n     *      R.max(789, 123); //=> 789\n     *      R.max('a', 'b'); //=> 'b'\n     */\n    var max = _curry2(function max(a, b) {\n        return b > a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces\n     * the larger result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.max, R.minBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.maxBy(square, -3, 2); //=> -3\n     *\n     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n     *      R.reduce(R.maxBy(square), 0, []); //=> 0\n     */\n    var maxBy = _curry3(function maxBy(f, a, b) {\n        return f(b) > f(a) ? b : a;\n    });\n\n    /**\n     * Create a new object with the own properties of `a`\n     * merged with the own properties of object `b`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> {k: v} -> {k: v}\n     * @param {Object} a\n     * @param {Object} b\n     * @return {Object}\n     * @example\n     *\n     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n     *      //=> { 'name': 'fred', 'age': 40 }\n     *\n     *      var resetToDefault = R.merge(R.__, {x: 0});\n     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n     */\n    var merge = _curry2(function merge(a, b) {\n        var result = {};\n        var ks = keys(a);\n        var idx = 0;\n        while (idx < ks.length) {\n            result[ks[idx]] = a[ks[idx]];\n            idx += 1;\n        }\n        ks = keys(b);\n        idx = 0;\n        while (idx < ks.length) {\n            result[ks[idx]] = b[ks[idx]];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns the smaller of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.minBy, R.max\n     * @example\n     *\n     *      R.min(789, 123); //=> 123\n     *      R.min('a', 'b'); //=> 'a'\n     */\n    var min = _curry2(function min(a, b) {\n        return b < a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces\n     * the smaller result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.min, R.maxBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.minBy(square, -3, 2); //=> 2\n     *\n     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n     */\n    var minBy = _curry3(function minBy(f, a, b) {\n        return f(b) < f(a) ? b : a;\n    });\n\n    /**\n     * Divides the second parameter by the first and returns the remainder.\n     * Note that this function preserves the JavaScript-style behavior for\n     * modulo. For mathematical modulo see `mathMod`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The value to the divide.\n     * @param {Number} b The pseudo-modulus\n     * @return {Number} The result of `b % a`.\n     * @see R.mathMod\n     * @example\n     *\n     *      R.modulo(17, 3); //=> 2\n     *      // JS behavior:\n     *      R.modulo(-17, 3); //=> -2\n     *      R.modulo(17, -3); //=> 2\n     *\n     *      var isOdd = R.modulo(R.__, 2);\n     *      isOdd(42); //=> 0\n     *      isOdd(21); //=> 1\n     */\n    var modulo = _curry2(function modulo(a, b) {\n        return a % b;\n    });\n\n    /**\n     * Multiplies two numbers. Equivalent to `a * b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a * b`.\n     * @see R.divide\n     * @example\n     *\n     *      var double = R.multiply(2);\n     *      var triple = R.multiply(3);\n     *      double(3);       //=>  6\n     *      triple(4);       //=> 12\n     *      R.multiply(2, 5);  //=> 10\n     */\n    var multiply = _curry2(function multiply(a, b) {\n        return a * b;\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts exactly `n`\n     * parameters. Any extraneous parameters will not be passed to the supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} n The desired arity of the new function.\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity `n`.\n     * @example\n     *\n     *      var takesTwoArgs = (a, b) => [a, b];\n     *\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.nAry(1, takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only `n` arguments are passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var nAry = _curry2(function nAry(n, fn) {\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.call(this);\n            };\n        case 1:\n            return function (a0) {\n                return fn.call(this, a0);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.call(this, a0, a1);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.call(this, a0, a1, a2);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.call(this, a0, a1, a2, a3);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.call(this, a0, a1, a2, a3, a4);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n            };\n        default:\n            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n        }\n    });\n\n    /**\n     * Negates its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @example\n     *\n     *      R.negate(42); //=> -42\n     */\n    var negate = _curry1(function negate(n) {\n        return -n;\n    });\n\n    /**\n     * A function that returns the `!` of its argument. It will return `true` when\n     * passed false-y value, and `false` when passed a truth-y one.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> Boolean\n     * @param {*} a any value\n     * @return {Boolean} the logical inverse of passed argument.\n     * @see R.complement\n     * @example\n     *\n     *      R.not(true); //=> false\n     *      R.not(false); //=> true\n     *      R.not(0); => true\n     *      R.not(1); => false\n     */\n    var not = _curry1(function not(a) {\n        return !a;\n    });\n\n    /**\n     * Returns the nth element of the given list or string.\n     * If n is negative the element at index length + n is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> a | Undefined\n     * @sig Number -> String -> String\n     * @param {Number} offset\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      var list = ['foo', 'bar', 'baz', 'quux'];\n     *      R.nth(1, list); //=> 'bar'\n     *      R.nth(-1, list); //=> 'quux'\n     *      R.nth(-99, list); //=> undefined\n     *\n     *      R.nth('abc', 2); //=> 'c'\n     *      R.nth('abc', 3); //=> ''\n     */\n    var nth = _curry2(function nth(offset, list) {\n        var idx = offset < 0 ? list.length + offset : offset;\n        return _isString(list) ? list.charAt(idx) : list[idx];\n    });\n\n    /**\n     * Returns a function which returns its nth argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig Number -> *... -> *\n     * @param {Number} n\n     * @return {Function}\n     * @example\n     *\n     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n     */\n    var nthArg = _curry1(function nthArg(n) {\n        return function () {\n            return nth(n, arguments);\n        };\n    });\n\n    /**\n     * Creates an object containing a single key:value pair.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig String -> a -> {String:a}\n     * @param {String} key\n     * @param {*} val\n     * @return {Object}\n     * @see R.pair\n     * @example\n     *\n     *      var matchPhrases = R.compose(\n     *        R.objOf('must'),\n     *        R.map(R.objOf('match_phrase'))\n     *      );\n     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n     */\n    var objOf = _curry2(function objOf(key, val) {\n        var obj = {};\n        obj[key] = val;\n        return obj;\n    });\n\n    /**\n     * Returns a singleton array containing the value provided.\n     *\n     * Note this `of` is different from the ES6 `of`; See\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> [a]\n     * @param {*} x any value\n     * @return {Array} An array wrapping `x`.\n     * @example\n     *\n     *      R.of(null); //=> [null]\n     *      R.of([42]); //=> [[42]]\n     */\n    var of = _curry1(_of);\n\n    /**\n     * Accepts a function `fn` and returns a function that guards invocation of `fn` such that\n     * `fn` can only ever be called once, no matter how many times the returned function is\n     * invoked. The first value calculated is returned in subsequent invocations.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> (a... -> b)\n     * @param {Function} fn The function to wrap in a call-only-once wrapper.\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      var addOneOnce = R.once(x => x + 1);\n     *      addOneOnce(10); //=> 11\n     *      addOneOnce(addOneOnce(50)); //=> 11\n     */\n    var once = _curry1(function once(fn) {\n        var called = false, result;\n        return function () {\n            if (called) {\n                return result;\n            }\n            called = true;\n            result = fn.apply(this, arguments);\n            return result;\n        };\n    });\n\n    /**\n     * Returns `true` if one or both of its arguments are `true`. Returns `false`\n     * if both arguments are `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise\n     * @see R.either\n     * @example\n     *\n     *      R.or(true, true); //=> true\n     *      R.or(true, false); //=> true\n     *      R.or(false, true); //=> true\n     *      R.or(false, false); //=> false\n     */\n    var or = _curry2(function or(a, b) {\n        return a || b;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the result of applying the given function to\n     * the focused value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> (a -> a) -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n     */\n    var over = function () {\n        var Identity = function (x) {\n            return {\n                value: x,\n                map: function (f) {\n                    return Identity(f(x));\n                }\n            };\n        };\n        return _curry3(function over(lens, f, x) {\n            return lens(function (y) {\n                return Identity(f(y));\n            })(x).value;\n        });\n    }();\n\n    /**\n     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category List\n     * @sig a -> b -> (a,b)\n     * @param {*} fst\n     * @param {*} snd\n     * @return {Array}\n     * @see R.createMapEntry, R.of\n     * @example\n     *\n     *      pair('foo', 'bar'); //=> ['foo', 'bar']\n     */\n    var pair = _curry2(function pair(fst, snd) {\n        return [\n            fst,\n            snd\n        ];\n    });\n\n    /**\n     * Retrieve the value at a given path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig [String] -> {k: v} -> v | Undefined\n     * @param {Array} path The path to use.\n     * @return {*} The data at `path`.\n     * @example\n     *\n     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n     */\n    var path = _curry2(function path(paths, obj) {\n        if (obj == null) {\n            return;\n        } else {\n            var val = obj;\n            var idx = 0;\n            while (val != null && idx < paths.length) {\n                val = val[paths[idx]];\n                idx += 1;\n            }\n            return val;\n        }\n    });\n\n    /**\n     * If the given, non-null object has a value at the given path, returns\n     * the value at that path. Otherwise returns the provided default value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig a -> [String] -> Object -> a\n     * @param {*} d The default value.\n     * @param {Array} p The path to use.\n     * @return {*} The data at `path` of the supplied object or the default value.\n     * @example\n     *\n     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n     */\n    var pathOr = _curry3(function pathOr(d, p, obj) {\n        return defaultTo(d, path(p, obj));\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys specified.  If the key does not exist, the\n     * property is ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.omit, R.props\n     * @example\n     *\n     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n     */\n    var pick = _curry2(function pick(names, obj) {\n        var result = {};\n        var idx = 0;\n        while (idx < names.length) {\n            if (names[idx] in obj) {\n                result[names[idx]] = obj[names[idx]];\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Similar to `pick` except that this one includes a `key: undefined` pair for properties that don't exist.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n     */\n    var pickAll = _curry2(function pickAll(names, obj) {\n        var result = {};\n        var idx = 0;\n        var len = names.length;\n        while (idx < len) {\n            var name = names[idx];\n            result[name] = obj[name];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys that\n     * satisfy the supplied predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n     * @param {Function} pred A predicate to determine whether or not a key\n     *        should be included on the output object.\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties that satisfy `pred`\n     *         on it.\n     * @see R.pick\n     * @example\n     *\n     *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n     */\n    var pickBy = _curry2(function pickBy(test, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (test(obj[prop], prop, obj)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list with the given element at the front, followed by the contents of the\n     * list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The item to add to the head of the output list.\n     * @param {Array} list The array to add to the tail of the output list.\n     * @return {Array} A new array.\n     * @see R.append\n     * @example\n     *\n     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n     */\n    var prepend = _curry2(function prepend(el, list) {\n        return _concat([el], list);\n    });\n\n    /**\n     * Returns a function that when supplied an object returns the indicated property of that object, if it exists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig s -> {s: a} -> a | Undefined\n     * @param {String} p The property name\n     * @param {Object} obj The object to query\n     * @return {*} The value at `obj.p`.\n     * @example\n     *\n     *      R.prop('x', {x: 100}); //=> 100\n     *      R.prop('x', {}); //=> undefined\n     */\n    var prop = _curry2(function prop(p, obj) {\n        return obj[p];\n    });\n\n    /**\n     * If the given, non-null object has an own property with the specified name,\n     * returns the value of that property.\n     * Otherwise returns the provided default value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Object\n     * @sig a -> String -> Object -> a\n     * @param {*} val The default value.\n     * @param {String} p The name of the property to return.\n     * @param {Object} obj The object to query.\n     * @return {*} The value of given property of the supplied object or the default value.\n     * @example\n     *\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var favorite = R.prop('favoriteLibrary');\n     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n     *\n     *      favorite(alice);  //=> undefined\n     *      favoriteWithDefault(alice);  //=> 'Ramda'\n     */\n    var propOr = _curry3(function propOr(val, p, obj) {\n        return obj != null && _has(p, obj) ? obj[p] : val;\n    });\n\n    /**\n     * Returns `true` if the specified object property satisfies the given\n     * predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Logic\n     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n     * @param {Function} pred\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propEq\n     * @see R.propIs\n     * @example\n     *\n     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n     */\n    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n        return pred(obj[name]);\n    });\n\n    /**\n     * Acts as multiple `prop`: array of keys in, array of values out. Preserves order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> [v]\n     * @param {Array} ps The property names to fetch\n     * @param {Object} obj The object to query\n     * @return {Array} The corresponding values or partially applied function.\n     * @example\n     *\n     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n     *\n     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n     */\n    var props = _curry2(function props(ps, obj) {\n        var len = ps.length;\n        var out = [];\n        var idx = 0;\n        while (idx < len) {\n            out[idx] = obj[ps[idx]];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a list of numbers from `from` (inclusive) to `to`\n     * (exclusive).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> Number -> [Number]\n     * @param {Number} from The first number in the list.\n     * @param {Number} to One more than the last number in the list.\n     * @return {Array} The list of numbers in tthe set `[a, b)`.\n     * @example\n     *\n     *      R.range(1, 5);    //=> [1, 2, 3, 4]\n     *      R.range(50, 53);  //=> [50, 51, 52]\n     */\n    var range = _curry2(function range(from, to) {\n        if (!(_isNumber(from) && _isNumber(to))) {\n            throw new TypeError('Both arguments to range must be numbers');\n        }\n        var result = [];\n        var n = from;\n        while (n < to) {\n            result.push(n);\n            n += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling the iterator\n     * function and passing it an accumulator value and the current value from the array, and\n     * then passing the result to the next call.\n     *\n     * Similar to `reduce`, except moves through the input list from the right to the left.\n     *\n     * The iterator function receives two values: *(acc, value)*\n     *\n     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse arrays), unlike\n     * the native `Array.prototype.reduce` method. For more details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];\n     *      var flattenPairs = (acc, pair) => acc.concat(pair);\n     *\n     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]\n     */\n    var reduceRight = _curry3(function reduceRight(fn, acc, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            acc = fn(acc, list[idx]);\n            idx -= 1;\n        }\n        return acc;\n    });\n\n    /**\n     * Returns a value wrapped to indicate that it is the final value of the\n     * reduce and transduce functions.  The returned value\n     * should be considered a black box: the internal structure is not\n     * guaranteed to be stable.\n     *\n     * Note: this optimization is unavailable to functions not explicitly listed\n     * above.  For instance, it is not currently supported by reduceIndexed,\n     * reduceRight, or reduceRightIndexed.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category List\n     * @see R.reduce, R.transduce\n     * @sig a -> *\n     * @param {*} x The final value of the reduce.\n     * @return {*} The wrapped value.\n     * @example\n     *\n     *      R.reduce(\n     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),\n     *        0,\n     *        [1, 2, 3, 4, 5]) // 10\n     */\n    var reduced = _curry1(_reduced);\n\n    /**\n     * Removes the sub-list of `list` starting at index `start` and containing\n     * `count` elements.  _Note that this is not destructive_: it returns a\n     * copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @param {Number} start The position to start removing elements\n     * @param {Number} count The number of elements to remove\n     * @param {Array} list The list to remove from\n     * @return {Array} A new Array with `count` elements from `start` removed.\n     * @example\n     *\n     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n     */\n    var remove = _curry3(function remove(start, count, list) {\n        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));\n    });\n\n    /**\n     * Replace a substring or regex match in a string with a replacement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category String\n     * @sig RegExp|String -> String -> String -> String\n     * @param {RegExp|String} pattern A regular expression or a substring to match.\n     * @param {String} replacement The string to replace the matches with.\n     * @param {String} str The String to do the search and replacement in.\n     * @return {String} The result.\n     * @example\n     *\n     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *\n     *      // Use the \"g\" (global) flag to replace all occurrences:\n     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n     */\n    var replace = _curry3(function replace(regex, replacement, str) {\n        return str.replace(regex, replacement);\n    });\n\n    /**\n     * Returns a new list or string with the elements or characters in reverse\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {Array|String}\n     * @example\n     *\n     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n     *      R.reverse([1, 2]);     //=> [2, 1]\n     *      R.reverse([1]);        //=> [1]\n     *      R.reverse([]);         //=> []\n     *\n     *      R.reverse('abc');      //=> 'cba'\n     *      R.reverse('ab');       //=> 'ba'\n     *      R.reverse('a');        //=> 'a'\n     *      R.reverse('');         //=> ''\n     */\n    var reverse = _curry1(function reverse(list) {\n        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();\n    });\n\n    /**\n     * Scan is similar to reduce, but returns a list of successively reduced values from the left\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> [a]\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} A list of all intermediately reduced values.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n     */\n    var scan = _curry3(function scan(fn, acc, list) {\n        var idx = 0, len = list.length, result = [acc];\n        while (idx < len) {\n            acc = fn(acc, list[idx]);\n            result[idx + 1] = acc;\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> a -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n     */\n    var set = _curry3(function set(lens, v, x) {\n        return over(lens, always(v), x);\n    });\n\n    /**\n     * Returns a copy of the list, sorted according to the comparator function, which should accept two values at a\n     * time and return a negative number if the first value is smaller, a positive number if it's larger, and zero\n     * if they are equal.  Please note that this is a **copy** of the list.  It does not modify the original.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,a -> Number) -> [a] -> [a]\n     * @param {Function} comparator A sorting function :: a -> b -> Int\n     * @param {Array} list The list to sort\n     * @return {Array} a new array with its elements sorted by the comparator function.\n     * @example\n     *\n     *      var diff = function(a, b) { return a - b; };\n     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n     */\n    var sort = _curry2(function sort(comparator, list) {\n        return _slice(list).sort(comparator);\n    });\n\n    /**\n     * Sorts the list according to the supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> [a] -> [a]\n     * @param {Function} fn\n     * @param {Array} list The list to sort.\n     * @return {Array} A new list sorted by the keys generated by `fn`.\n     * @example\n     *\n     *      var sortByFirstItem = R.sortBy(R.prop(0));\n     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var bob = {\n     *        name: 'Bob',\n     *        age: -10\n     *      };\n     *      var clara = {\n     *        name: 'clara',\n     *        age: 314.159\n     *      };\n     *      var people = [clara, bob, alice];\n     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n     */\n    var sortBy = _curry2(function sortBy(fn, list) {\n        return _slice(list).sort(function (a, b) {\n            var aa = fn(a);\n            var bb = fn(b);\n            return aa < bb ? -1 : aa > bb ? 1 : 0;\n        });\n    });\n\n    /**\n     * Subtracts two numbers. Equivalent to `a - b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a - b`.\n     * @see R.add\n     * @example\n     *\n     *      R.subtract(10, 8); //=> 2\n     *\n     *      var minus5 = R.subtract(R.__, 5);\n     *      minus5(17); //=> 12\n     *\n     *      var complementaryAngle = R.subtract(90);\n     *      complementaryAngle(30); //=> 60\n     *      complementaryAngle(72); //=> 18\n     */\n    var subtract = _curry2(function subtract(a, b) {\n        return a - b;\n    });\n\n    /**\n     * Returns a new list containing the last `n` elements of a given list, passing each value\n     * to the supplied predicate function, and terminating when the predicate function returns\n     * `false`. Excludes the element that caused the predicate function to fail. The predicate\n     * function is passed one argument: *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropLastWhile\n     * @example\n     *\n     *      var isNotOne = x => x !== 1;\n     *\n     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n     */\n    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && fn(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, idx + 1, Infinity);\n    });\n\n    /**\n     * Runs the given function with the supplied object, then returns the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> *) -> a -> a\n     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n     * @param {*} x\n     * @return {*} `x`.\n     * @example\n     *\n     *      var sayX = x => console.log('x is ' + x);\n     *      R.tap(sayX, 100); //=> 100\n     *      //-> 'x is 100'\n     */\n    var tap = _curry2(function tap(fn, x) {\n        fn(x);\n        return x;\n    });\n\n    /**\n     * Calls an input function `n` times, returning an array containing the results of those\n     * function calls.\n     *\n     * `fn` is passed one argument: The current value of `n`, which begins at `0` and is\n     * gradually incremented to `n - 1`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.3\n     * @category List\n     * @sig (i -> a) -> i -> [a]\n     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n     * @return {Array} An array containing the return values of all calls to `fn`.\n     * @example\n     *\n     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n     */\n    var times = _curry2(function times(fn, n) {\n        var len = Number(n);\n        var list = new Array(len);\n        var idx = 0;\n        while (idx < len) {\n            list[idx] = fn(idx);\n            idx += 1;\n        }\n        return list;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays.\n     * Only the object's own properties are used.\n     * Note that the order of the output array is not guaranteed to be\n     * consistent across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own properties.\n     * @see R.fromPairs\n     * @example\n     *\n     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n     */\n    var toPairs = _curry1(function toPairs(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            if (_has(prop, obj)) {\n                pairs[pairs.length] = [\n                    prop,\n                    obj[prop]\n                ];\n            }\n        }\n        return pairs;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays.\n     * The object's own properties and prototype properties are used.\n     * Note that the order of the output array is not guaranteed to be\n     * consistent across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own\n     *         and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n     */\n    var toPairsIn = _curry1(function toPairsIn(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            pairs[pairs.length] = [\n                prop,\n                obj[prop]\n            ];\n        }\n        return pairs;\n    });\n\n    /**\n     * Removes (strips) whitespace from both ends of the string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to trim.\n     * @return {String} Trimmed version of `str`.\n     * @example\n     *\n     *      R.trim('   xyz  '); //=> 'xyz'\n     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n     */\n    var trim = function () {\n        var ws = '\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\n        var zeroWidth = '\\u200B';\n        var hasProtoTrim = typeof String.prototype.trim === 'function';\n        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n            return _curry1(function trim(str) {\n                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n                return str.replace(beginRx, '').replace(endRx, '');\n            });\n        } else {\n            return _curry1(function trim(str) {\n                return str.trim();\n            });\n        }\n    }();\n\n    /**\n     * Gives a single-word string description of the (native) type of a value, returning such\n     * answers as 'Object', 'Number', 'Array', or 'Null'.  Does not attempt to distinguish user\n     * Object types any further, reporting them all as 'Object'.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Type\n     * @sig (* -> {*}) -> String\n     * @param {*} val The value to test\n     * @return {String}\n     * @example\n     *\n     *      R.type({}); //=> \"Object\"\n     *      R.type(1); //=> \"Number\"\n     *      R.type(false); //=> \"Boolean\"\n     *      R.type('s'); //=> \"String\"\n     *      R.type(null); //=> \"Null\"\n     *      R.type([]); //=> \"Array\"\n     *      R.type(/[A-z]/); //=> \"RegExp\"\n     */\n    var type = _curry1(function type(val) {\n        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n    });\n\n    /**\n     * Takes a function `fn`, which takes a single array argument, and returns\n     * a function which:\n     *\n     *   - takes any number of positional arguments;\n     *   - passes these arguments to `fn` as an array; and\n     *   - returns the result.\n     *\n     * In other words, R.unapply derives a variadic function from a function\n     * which takes an array. R.unapply is the inverse of R.apply.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Function\n     * @sig ([*...] -> a) -> (*... -> a)\n     * @param {Function} fn\n     * @return {Function}\n     * @see R.apply\n     * @example\n     *\n     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n     */\n    var unapply = _curry1(function unapply(fn) {\n        return function () {\n            return fn(_slice(arguments));\n        };\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts exactly 1\n     * parameter. Any extraneous parameters will not be passed to the supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> b) -> (a -> b)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 1.\n     * @example\n     *\n     *      var takesTwoArgs = function(a, b) {\n     *        return [a, b];\n     *      };\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.unary(takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only 1 argument is passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var unary = _curry1(function unary(fn) {\n        return nAry(1, fn);\n    });\n\n    /**\n     * Returns a function of arity `n` from a (manually) curried function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Function\n     * @sig Number -> (a -> b) -> (a -> c)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to uncurry.\n     * @return {Function} A new function.\n     * @see R.curry\n     * @example\n     *\n     *      var addFour = a => b => c => d => a + b + c + d;\n     *\n     *      var uncurriedAddFour = R.uncurryN(4, addFour);\n     *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n     */\n    var uncurryN = _curry2(function uncurryN(depth, fn) {\n        return curryN(depth, function () {\n            var currentDepth = 1;\n            var value = fn;\n            var idx = 0;\n            var endIdx;\n            while (currentDepth <= depth && typeof value === 'function') {\n                endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n                value = value.apply(this, _slice(arguments, idx, endIdx));\n                currentDepth += 1;\n                idx = endIdx;\n            }\n            return value;\n        });\n    });\n\n    /**\n     * Builds a list from a seed value. Accepts an iterator function, which returns either false\n     * to stop iteration or an array of length 2 containing the value to add to the resulting\n     * list and the seed to be used in the next call to the iterator function.\n     *\n     * The iterator function receives one argument: *(seed)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a -> [b]) -> * -> [b]\n     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n     *        either false to quit iteration or an array of length two to proceed. The element\n     *        at index 0 of this array will be added to the resulting array, and the element\n     *        at index 1 will be passed to the next call to `fn`.\n     * @param {*} seed The seed value.\n     * @return {Array} The final list.\n     * @example\n     *\n     *      var f = n => n > 50 ? false : [-n, n + 10];\n     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n     */\n    var unfold = _curry2(function unfold(fn, seed) {\n        var pair = fn(seed);\n        var result = [];\n        while (pair && pair.length) {\n            result[result.length] = pair[0];\n            pair = fn(pair[1]);\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original list, based\n     * upon the value returned by applying the supplied predicate to two list elements. Prefers\n     * the first item if two items compare equal based on the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      var strEq = R.eqBy(String);\n     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n     */\n    var uniqWith = _curry2(function uniqWith(pred, list) {\n        var idx = 0, len = list.length;\n        var result = [], item;\n        while (idx < len) {\n            item = list[idx];\n            if (!_containsWith(pred, item, result)) {\n                result[result.length] = item;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Tests the final argument by passing it to the given predicate function.\n     * If the predicate is not satisfied, the function will return the\n     * result of calling the `whenFalseFn` function with the same argument. If the\n     * predicate is satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @see R.ifElse, R.when\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred        A predicate function\n     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n     *                               to a falsy value.\n     * @param {*}        x           An object to test with the `pred` function and\n     *                               pass to `whenFalseFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n     * @example\n     *\n     *      // coerceArray :: (a|[a]) -> [a]\n     *      var coerceArray = R.unless(R.isArrayLike, R.of);\n     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]\n     *      coerceArray(1);         //=> [1]\n     */\n    var unless = _curry3(function unless(pred, whenFalseFn, x) {\n        return pred(x) ? x : whenFalseFn(x);\n    });\n\n    /**\n     * Returns a new copy of the array with the element at the\n     * provided index replaced with the given value.\n     * @see R.adjust\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} idx The index to update.\n     * @param {*} x The value to exist at the given index of the returned array.\n     * @param {Array|Arguments} list The source array-like object to be updated.\n     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n     * @example\n     *\n     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var update = _curry3(function update(idx, x, list) {\n        return adjust(always(x), idx, list);\n    });\n\n    /**\n     * Returns a list of all the enumerable own properties of the supplied object.\n     * Note that the order of the output array is not guaranteed across\n     * different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own properties.\n     * @example\n     *\n     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n     */\n    var values = _curry1(function values(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var vals = [];\n        var idx = 0;\n        while (idx < len) {\n            vals[idx] = obj[props[idx]];\n            idx += 1;\n        }\n        return vals;\n    });\n\n    /**\n     * Returns a list of all the properties, including prototype properties,\n     * of the supplied object.\n     * Note that the order of the output array is not guaranteed to be\n     * consistent across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.valuesIn(f); //=> ['X', 'Y']\n     */\n    var valuesIn = _curry1(function valuesIn(obj) {\n        var prop, vs = [];\n        for (prop in obj) {\n            vs[vs.length] = obj[prop];\n        }\n        return vs;\n    });\n\n    /**\n     * Returns a \"view\" of the given data structure, determined by the given lens.\n     * The lens's focus determines which portion of the data structure is visible.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> s -> a\n     * @param {Lens} lens\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});  //=> 1\n     *      R.view(xLens, {x: 4, y: 2});  //=> 4\n     */\n    var view = function () {\n        var Const = function (x) {\n            return {\n                value: x,\n                map: function () {\n                    return this;\n                }\n            };\n        };\n        return _curry2(function view(lens, x) {\n            return lens(Const)(x).value;\n        });\n    }();\n\n    /**\n     * Tests the final argument by passing it to the given predicate function.\n     * If the predicate is satisfied, the function will return the result\n     * of calling the `whenTrueFn` function with the same argument. If the predicate\n     * is not satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @see R.ifElse, R.unless\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred       A predicate function\n     * @param {Function} whenTrueFn A function to invoke when the `condition`\n     *                              evaluates to a truthy value.\n     * @param {*}        x          An object to test with the `pred` function and\n     *                              pass to `whenTrueFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n     * @example\n     *\n     *      // truncate :: String -> String\n     *      var truncate = R.when(\n     *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n     *        R.pipe(R.take(10), R.append('…'), R.join(''))\n     *      );\n     *      truncate('12345');         //=> '12345'\n     *      truncate('0123456789ABC'); //=> '0123456789…'\n     */\n    var when = _curry3(function when(pred, whenTrueFn, x) {\n        return pred(x) ? whenTrueFn(x) : x;\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec. Each of the spec's own properties must be a predicate function.\n     * Each predicate is applied to the value of the corresponding property of\n     * the test object. `where` returns true if all the predicates return true,\n     * false otherwise.\n     *\n     * `where` is well suited to declaratively expressing constraints for other\n     * functions such as `filter` and `find`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Object\n     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = R.where({\n     *        a: R.equals('foo'),\n     *        b: R.complement(R.equals('bar')),\n     *        x: R.gt(_, 10),\n     *        y: R.lt(_, 20)\n     *      });\n     *\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n     */\n    var where = _curry2(function where(spec, testObj) {\n        for (var prop in spec) {\n            if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n                return false;\n            }\n        }\n        return true;\n    });\n\n    /**\n     * Wrap a function inside another to allow you to make adjustments to the parameters, or do\n     * other processing either before the internal function is called or with its results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)\n     * @param {Function} fn The function to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      var greet = name => 'Hello ' + name;\n     *\n     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());\n     *\n     *      shoutedGreet(\"Kathy\"); //=> \"HELLO KATHY\"\n     *\n     *      var shortenedGreet = R.wrap(greet, function(gr, name) {\n     *        return gr(name.substring(0, 3));\n     *      });\n     *      shortenedGreet(\"Robert\"); //=> \"Hello Rob\"\n     */\n    var wrap = _curry2(function wrap(fn, wrapper) {\n        return curryN(fn.length, function () {\n            return wrapper.apply(this, _concat([fn], arguments));\n        });\n    });\n\n    /**\n     * Creates a new list out of the two supplied by creating each possible\n     * pair from the lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The list made by combining each possible pair from\n     *         `as` and `bs` into pairs (`[a, b]`).\n     * @example\n     *\n     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n     */\n    // = xprodWith(prepend); (takes about 3 times as long...)\n    var xprod = _curry2(function xprod(a, b) {\n        // = xprodWith(prepend); (takes about 3 times as long...)\n        var idx = 0;\n        var ilen = a.length;\n        var j;\n        var jlen = b.length;\n        var result = [];\n        while (idx < ilen) {\n            j = 0;\n            while (j < jlen) {\n                result[result.length] = [\n                    a[idx],\n                    b[j]\n                ];\n                j += 1;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by pairing up\n     * equally-positioned items from both lists.  The returned list is\n     * truncated to the length of the shorter of the two input lists.\n     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n     * @example\n     *\n     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     */\n    var zip = _curry2(function zip(a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = [\n                a[idx],\n                b[idx]\n            ];\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * Creates a new object out of a list of keys and a list of values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [String] -> [*] -> {String: *}\n     * @param {Array} keys The array that will be properties on the output object.\n     * @param {Array} values The list of values on the output object.\n     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n     * @example\n     *\n     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n     */\n    var zipObj = _curry2(function zipObj(keys, values) {\n        var idx = 0, len = keys.length, out = {};\n        while (idx < len) {\n            out[keys[idx]] = values[idx];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by applying the function to\n     * each equally-positioned pair in the lists. The returned list is\n     * truncated to the length of the shorter of the two input lists.\n     *\n     * @function\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> c) -> [a] -> [b] -> [c]\n     * @param {Function} fn The function used to combine the two elements into one value.\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n     *         using `fn`.\n     * @example\n     *\n     *      var f = (x, y) => {\n     *        // ...\n     *      };\n     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n     */\n    var zipWith = _curry3(function zipWith(fn, a, b) {\n        var rv = [], idx = 0, len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = fn(a[idx], b[idx]);\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * A function that always returns `false`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.T\n     * @example\n     *\n     *      R.F(); //=> false\n     */\n    var F = always(false);\n\n    /**\n     * A function that always returns `true`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.F\n     * @example\n     *\n     *      R.T(); //=> true\n     */\n    var T = always(true);\n\n    var _aperture = function _aperture(n, list) {\n        var idx = 0;\n        var limit = list.length - (n - 1);\n        var acc = new Array(limit >= 0 ? limit : 0);\n        while (idx < limit) {\n            acc[idx] = _slice(list, idx, idx + n);\n            idx += 1;\n        }\n        return acc;\n    };\n\n    /**\n     * Similar to hasMethod, this checks whether a function has a [methodname]\n     * function. If it isn't an array it will execute that function otherwise it will\n     * default to the ramda implementation.\n     *\n     * @private\n     * @param {Function} fn ramda implemtation\n     * @param {String} methodname property to check for a custom implementation\n     * @return {Object} Whatever the return value of the method is.\n     */\n    var _checkForMethod = function _checkForMethod(methodname, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n        };\n    };\n\n    /**\n     * Copies an object.\n     *\n     * @private\n     * @param {*} value The value to be copied\n     * @param {Array} refFrom Array containing the source references\n     * @param {Array} refTo Array containing the copied source references\n     * @return {*} The copied value.\n     */\n    var _clone = function _clone(value, refFrom, refTo) {\n        var copy = function copy(copiedValue) {\n            var len = refFrom.length;\n            var idx = 0;\n            while (idx < len) {\n                if (value === refFrom[idx]) {\n                    return refTo[idx];\n                }\n                idx += 1;\n            }\n            refFrom[idx + 1] = value;\n            refTo[idx + 1] = copiedValue;\n            for (var key in value) {\n                copiedValue[key] = _clone(value[key], refFrom, refTo);\n            }\n            return copiedValue;\n        };\n        switch (type(value)) {\n        case 'Object':\n            return copy({});\n        case 'Array':\n            return copy([]);\n        case 'Date':\n            return new Date(value);\n        case 'RegExp':\n            return _cloneRegExp(value);\n        default:\n            return value;\n        }\n    };\n\n    var _createPartialApplicator = function _createPartialApplicator(concat) {\n        return _curry2(function (fn, args) {\n            return _arity(Math.max(0, fn.length - args.length), function () {\n                return fn.apply(this, concat(args, arguments));\n            });\n        });\n    };\n\n    /**\n     * Returns a function that dispatches with different strategies based on the\n     * object in list position (last argument). If it is an array, executes [fn].\n     * Otherwise, if it has a  function with [methodname], it will execute that\n     * function (functor case). Otherwise, if it is a transformer, uses transducer\n     * [xf] to return a new transformer (transducer case). Otherwise, it will\n     * default to executing [fn].\n     *\n     * @private\n     * @param {String} methodname property to check for a custom implementation\n     * @param {Function} xf transducer to initialize if object is transformer\n     * @param {Function} fn default ramda implementation\n     * @return {Function} A function that dispatches on object in list position\n     */\n    var _dispatchable = function _dispatchable(methodname, xf, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            if (!_isArray(obj)) {\n                var args = _slice(arguments, 0, length - 1);\n                if (typeof obj[methodname] === 'function') {\n                    return obj[methodname].apply(obj, args);\n                }\n                if (_isTransformer(obj)) {\n                    var transducer = xf.apply(null, args);\n                    return transducer(obj);\n                }\n            }\n            return fn.apply(this, arguments);\n        };\n    };\n\n    // Values of other types are only equal if identical.\n    var _equals = function _equals(a, b, stackA, stackB) {\n        if (identical(a, b)) {\n            return true;\n        }\n        if (type(a) !== type(b)) {\n            return false;\n        }\n        if (a == null || b == null) {\n            return false;\n        }\n        if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n        }\n        switch (type(a)) {\n        case 'Arguments':\n        case 'Array':\n        case 'Object':\n            break;\n        case 'Boolean':\n        case 'Number':\n        case 'String':\n            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n                return false;\n            }\n            break;\n        case 'Date':\n            if (!identical(a.valueOf(), b.valueOf())) {\n                return false;\n            }\n            break;\n        case 'RegExp':\n            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n                return false;\n            }\n            break;\n        case 'Map':\n        case 'Set':\n            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n                return false;\n            }\n            break;\n        case 'Int8Array':\n        case 'Uint8Array':\n        case 'Uint8ClampedArray':\n        case 'Int16Array':\n        case 'Uint16Array':\n        case 'Int32Array':\n        case 'Uint32Array':\n        case 'Float32Array':\n        case 'Float64Array':\n            break;\n        case 'ArrayBuffer':\n            break;\n        default:\n            // Values of other types are only equal if identical.\n            return false;\n        }\n        var keysA = keys(a);\n        if (keysA.length !== keys(b).length) {\n            return false;\n        }\n        var idx = stackA.length - 1;\n        while (idx >= 0) {\n            if (stackA[idx] === a) {\n                return stackB[idx] === b;\n            }\n            idx -= 1;\n        }\n        stackA.push(a);\n        stackB.push(b);\n        idx = keysA.length - 1;\n        while (idx >= 0) {\n            var key = keysA[idx];\n            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n                return false;\n            }\n            idx -= 1;\n        }\n        stackA.pop();\n        stackB.pop();\n        return true;\n    };\n\n    /**\n     * `_makeFlat` is a helper function that returns a one-level or fully recursive function\n     * based on the flag passed in.\n     *\n     * @private\n     */\n    var _makeFlat = function _makeFlat(recursive) {\n        return function flatt(list) {\n            var value, result = [], idx = 0, j, ilen = list.length, jlen;\n            while (idx < ilen) {\n                if (isArrayLike(list[idx])) {\n                    value = recursive ? flatt(list[idx]) : list[idx];\n                    j = 0;\n                    jlen = value.length;\n                    while (j < jlen) {\n                        result[result.length] = value[j];\n                        j += 1;\n                    }\n                } else {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n            return result;\n        };\n    };\n\n    var _reduce = function () {\n        function _arrayReduce(xf, acc, list) {\n            var idx = 0, len = list.length;\n            while (idx < len) {\n                acc = xf['@@transducer/step'](acc, list[idx]);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                idx += 1;\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _iterableReduce(xf, acc, iter) {\n            var step = iter.next();\n            while (!step.done) {\n                acc = xf['@@transducer/step'](acc, step.value);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                step = iter.next();\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _methodReduce(xf, acc, obj) {\n            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n        }\n        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n        return function _reduce(fn, acc, list) {\n            if (typeof fn === 'function') {\n                fn = _xwrap(fn);\n            }\n            if (isArrayLike(list)) {\n                return _arrayReduce(fn, acc, list);\n            }\n            if (typeof list.reduce === 'function') {\n                return _methodReduce(fn, acc, list);\n            }\n            if (list[symIterator] != null) {\n                return _iterableReduce(fn, acc, list[symIterator]());\n            }\n            if (typeof list.next === 'function') {\n                return _iterableReduce(fn, acc, list);\n            }\n            throw new TypeError('reduce: list must be array or iterable');\n        };\n    }();\n\n    var _xall = function () {\n        function XAll(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.all = true;\n        }\n        XAll.prototype['@@transducer/init'] = _xfBase.init;\n        XAll.prototype['@@transducer/result'] = function (result) {\n            if (this.all) {\n                result = this.xf['@@transducer/step'](result, true);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAll.prototype['@@transducer/step'] = function (result, input) {\n            if (!this.f(input)) {\n                this.all = false;\n                result = _reduced(this.xf['@@transducer/step'](result, false));\n            }\n            return result;\n        };\n        return _curry2(function _xall(f, xf) {\n            return new XAll(f, xf);\n        });\n    }();\n\n    var _xany = function () {\n        function XAny(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.any = false;\n        }\n        XAny.prototype['@@transducer/init'] = _xfBase.init;\n        XAny.prototype['@@transducer/result'] = function (result) {\n            if (!this.any) {\n                result = this.xf['@@transducer/step'](result, false);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAny.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.any = true;\n                result = _reduced(this.xf['@@transducer/step'](result, true));\n            }\n            return result;\n        };\n        return _curry2(function _xany(f, xf) {\n            return new XAny(f, xf);\n        });\n    }();\n\n    var _xaperture = function () {\n        function XAperture(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XAperture.prototype['@@transducer/init'] = _xfBase.init;\n        XAperture.prototype['@@transducer/result'] = _xfBase.result;\n        XAperture.prototype['@@transducer/step'] = function (result, input) {\n            this.store(input);\n            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n        };\n        XAperture.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        XAperture.prototype.getCopy = function () {\n            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));\n        };\n        return _curry2(function _xaperture(n, xf) {\n            return new XAperture(n, xf);\n        });\n    }();\n\n    var _xdrop = function () {\n        function XDrop(n, xf) {\n            this.xf = xf;\n            this.n = n;\n        }\n        XDrop.prototype['@@transducer/init'] = _xfBase.init;\n        XDrop.prototype['@@transducer/result'] = _xfBase.result;\n        XDrop.prototype['@@transducer/step'] = function (result, input) {\n            if (this.n > 0) {\n                this.n -= 1;\n                return result;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdrop(n, xf) {\n            return new XDrop(n, xf);\n        });\n    }();\n\n    var _xdropWhile = function () {\n        function XDropWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f) {\n                if (this.f(input)) {\n                    return result;\n                }\n                this.f = null;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropWhile(f, xf) {\n            return new XDropWhile(f, xf);\n        });\n    }();\n\n    var _xgroupBy = function () {\n        function XGroupBy(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.inputs = {};\n        }\n        XGroupBy.prototype['@@transducer/init'] = _xfBase.init;\n        XGroupBy.prototype['@@transducer/result'] = function (result) {\n            var key;\n            for (key in this.inputs) {\n                if (_has(key, this.inputs)) {\n                    result = this.xf['@@transducer/step'](result, this.inputs[key]);\n                    if (result['@@transducer/reduced']) {\n                        result = result['@@transducer/value'];\n                        break;\n                    }\n                }\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XGroupBy.prototype['@@transducer/step'] = function (result, input) {\n            var key = this.f(input);\n            this.inputs[key] = this.inputs[key] || [\n                key,\n                []\n            ];\n            this.inputs[key][1] = append(input, this.inputs[key][1]);\n            return result;\n        };\n        return _curry2(function _xgroupBy(f, xf) {\n            return new XGroupBy(f, xf);\n        });\n    }();\n\n    /**\n     * Creates a new list iteration function from an existing one by adding two new parameters\n     * to its callback function: the current index, and the entire list.\n     *\n     * This would turn, for instance, Ramda's simple `map` function into one that more closely\n     * resembles `Array.prototype.map`.  Note that this will only work for functions in which\n     * the iteration callback function is the first parameter, and where the list is the last\n     * parameter.  (This latter might be unimportant if the list parameter is not used.)\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Function\n     * @category List\n     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n     * @param {Function} fn A list iteration function that does not pass index or list to its callback\n     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n     * @example\n     *\n     *      var mapIndexed = R.addIndex(R.map);\n     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n     */\n    var addIndex = _curry1(function addIndex(fn) {\n        return curryN(fn.length, function () {\n            var idx = 0;\n            var origFn = arguments[0];\n            var list = arguments[arguments.length - 1];\n            var args = _slice(arguments);\n            args[0] = function () {\n                var result = origFn.apply(this, _concat(arguments, [\n                    idx,\n                    list\n                ]));\n                idx += 1;\n                return result;\n            };\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Returns `true` if all elements of the list match the predicate, `false` if there are any\n     * that don't.\n     *\n     * Dispatches to the `all` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n     *         otherwise.\n     * @see R.any, R.none\n     * @example\n     *\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      var lessThan3 = R.flip(R.lt)(3);\n     *      R.all(lessThan2)([1, 2]); //=> false\n     *      R.all(lessThan3)([1, 2]); //=> true\n     */\n    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (!fn(list[idx])) {\n                return false;\n            }\n            idx += 1;\n        }\n        return true;\n    }));\n\n    /**\n     * Returns `true` if at least one of elements of the list match the predicate, `false`\n     * otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n     *         otherwise.\n     * @see R.all, R.none\n     * @example\n     *\n     *      var lessThan0 = R.flip(R.lt)(0);\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      R.any(lessThan0)([1, 2]); //=> false\n     *      R.any(lessThan2)([1, 2]); //=> true\n     */\n    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (fn(list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    }));\n\n    /**\n     * Returns a new list, composed of n-tuples of consecutive elements\n     * If `n` is greater than the length of the list, an empty list is returned.\n     *\n     * Dispatches to the `aperture` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @param {Number} n The size of the tuples to create\n     * @param {Array} list The list to split into `n`-tuples\n     * @return {Array} The new list.\n     * @example\n     *\n     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n     */\n    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts exactly 2\n     * parameters. Any extraneous parameters will not be passed to the supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> c) -> (a, b -> c)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 2.\n     * @example\n     *\n     *      var takesThreeArgs = function(a, b, c) {\n     *        return [a, b, c];\n     *      };\n     *      takesThreeArgs.length; //=> 3\n     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      var takesTwoArgs = R.binary(takesThreeArgs);\n     *      takesTwoArgs.length; //=> 2\n     *      // Only 2 arguments are passed to the wrapped function\n     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n     */\n    var binary = _curry1(function binary(fn) {\n        return nAry(2, fn);\n    });\n\n    /**\n     * Creates a deep copy of the value which may contain (nested) `Array`s and `Object`s, `Number`s,\n     * `String`s, `Boolean`s and `Date`s. `Function`s are not copied, but assigned by their\n     * reference. Dispatches to a `clone` method if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {*} -> {*}\n     * @param {*} value The object or array to clone\n     * @return {*} A new object or array.\n     * @example\n     *\n     *      var objects = [{}, {}, {}];\n     *      var objectsClone = R.clone(objects);\n     *      objects[0] === objectsClone[0]; //=> false\n     */\n    var clone = _curry1(function clone(value) {\n        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], []);\n    });\n\n    /**\n     * Creates an object containing a single key:value pair.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig String -> a -> {String:a}\n     * @param {String} key\n     * @param {*} val\n     * @return {Object}\n     * @see R.pair, R.objOf\n     * @deprecated since v0.18.0\n     * @example\n     *\n     *      var matchPhrases = R.compose(\n     *        R.createMapEntry('must'),\n     *        R.map(R.createMapEntry('match_phrase'))\n     *      );\n     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n     */\n    var createMapEntry = objOf;\n\n    /**\n     * Returns a curried equivalent of the provided function. The curried\n     * function has two unusual capabilities. First, its arguments needn't\n     * be provided one at a time. If `f` is a ternary function and `g` is\n     * `R.curry(f)`, the following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`,\n     * the following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> a) -> (* -> a)\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curryN\n     * @example\n     *\n     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n     *\n     *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curry = _curry1(function curry(fn) {\n        return curryN(fn.length, fn);\n    });\n\n    /**\n     * Returns a new list containing the last `n` elements of a given list, passing each value\n     * to the supplied predicate function, skipping elements while the predicate function returns\n     * `true`. The predicate function is passed one argument: *(value)*.\n     *\n     * Dispatches to the `dropWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeWhile\n     * @example\n     *\n     *      var lteTwo = x => x <= 2;\n     *\n     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n     */\n    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {\n        var idx = 0, len = list.length;\n        while (idx < len && pred(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, idx);\n    }));\n\n    /**\n     * Returns `true` if its arguments are equivalent, `false` otherwise.\n     * Dispatches to an `equals` method if present. Handles cyclical data\n     * structures.\n     *\n     * Dispatches to the `equals` method of both arguments, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> b -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      R.equals(1, 1); //=> true\n     *      R.equals(1, '1'); //=> false\n     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n     *\n     *      var a = {}; a.v = a;\n     *      var b = {}; b.v = b;\n     *      R.equals(a, b); //=> true\n     */\n    var equals = _curry2(function equals(a, b) {\n        return _equals(a, b, [], []);\n    });\n\n    /**\n     * Returns a new list containing only those items that match a given predicate function.\n     * The predicate function is passed one argument: *(value)*.\n     *\n     * Note that `R.filter` does not skip deleted or unassigned indices, unlike the native\n     * `Array.prototype.filter` method. For more details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Description\n     *\n     * Dispatches to the `filter` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} The new filtered array.\n     * @see R.reject\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n     */\n    var filter = _curry2(_dispatchable('filter', _xfilter, _filter));\n\n    /**\n     * Returns the first element of the list which matches the predicate, or `undefined` if no\n     * element matches.\n     *\n     * Dispatches to the `find` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     *        desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n     *      R.find(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx += 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the first element of the list which matches the predicate, or `-1`\n     * if no element matches.\n     *\n     * Dispatches to the `findIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Returns the last element of the list which matches the predicate, or `undefined` if no\n     * element matches.\n     *\n     * Dispatches to the `findLast` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx -= 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the last element of the list which matches the predicate, or\n     * `-1` if no element matches.\n     *\n     * Dispatches to the `findLastIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx -= 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Returns a new list by pulling every item out of it (and all its sub-arrays) and putting\n     * them in a new array, depth-first.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b]\n     * @param {Array} list The array to consider.\n     * @return {Array} The flattened list.\n     * @see R.unnest\n     * @example\n     *\n     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n     */\n    var flatten = _curry1(_makeFlat(true));\n\n    /**\n     * Returns a new function much like the supplied one, except that the first two arguments'\n     * order is reversed.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n     * @param {Function} fn The function to invoke with its first two parameters reversed.\n     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n     * @example\n     *\n     *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n     *\n     *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n     */\n    var flip = _curry1(function flip(fn) {\n        return curry(function (a, b) {\n            var args = _slice(arguments);\n            args[0] = b;\n            args[1] = a;\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Iterate over an input `list`, calling a provided function `fn` for each element in the\n     * list.\n     *\n     * `fn` receives one argument: *(value)*.\n     *\n     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse arrays), unlike\n     * the native `Array.prototype.forEach` method. For more details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n     *\n     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns the original\n     * array. In some libraries this function is named `each`.\n     *\n     * Dispatches to the `forEach` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> *) -> [a] -> [a]\n     * @param {Function} fn The function to invoke. Receives one argument, `value`.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} The original list.\n     * @example\n     *\n     *      var printXPlusFive = x => console.log(x + 5);\n     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n     *      //-> 6\n     *      //-> 7\n     *      //-> 8\n     */\n    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            fn(list[idx]);\n            idx += 1;\n        }\n        return list;\n    }));\n\n    /**\n     * Returns a list of function names of object's own functions\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {*} -> [String]\n     * @param {Object} obj The objects with functions in it\n     * @return {Array} A list of the object's own properties that map to functions.\n     * @deprecated since v0.18.0\n     * @example\n     *\n     *      R.functions(R); // returns list of ramda's own function names\n     *\n     *      var F = function() { this.x = function(){}; this.y = 1; }\n     *      F.prototype.z = function() {};\n     *      F.prototype.a = 100;\n     *      R.functions(new F()); //=> [\"x\"]\n     */\n    var functions = _curry1(_functionsWith(keys));\n\n    /**\n     * Returns a list of function names of object's own and prototype functions\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {*} -> [String]\n     * @param {Object} obj The objects with functions in it\n     * @return {Array} A list of the object's own properties and prototype\n     *         properties that map to functions.\n     * @deprecated since v0.18.0\n     * @example\n     *\n     *      R.functionsIn(R); // returns list of ramda's own and prototype function names\n     *\n     *      var F = function() { this.x = function(){}; this.y = 1; }\n     *      F.prototype.z = function() {};\n     *      F.prototype.a = 100;\n     *      R.functionsIn(new F()); //=> [\"x\", \"z\"]\n     */\n    var functionsIn = _curry1(_functionsWith(keysIn));\n\n    /**\n     * Splits a list into sub-lists stored in an object, based on the result of calling a String-returning function\n     * on each element, and grouping the results according to values returned.\n     *\n     * Dispatches to the `groupBy` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> String) -> [a] -> {String: [a]}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} list The array to group\n     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n     *         that produced that key when passed to `fn`.\n     * @example\n     *\n     *      var byGrade = R.groupBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Abby', score: 84},\n     *                      {name: 'Eddy', score: 58},\n     *                      // ...\n     *                      {name: 'Jack', score: 69}];\n     *      byGrade(students);\n     *      // {\n     *      //   'A': [{name: 'Dianne', score: 99}],\n     *      //   'B': [{name: 'Abby', score: 84}]\n     *      //   // ...,\n     *      //   'F': [{name: 'Eddy', score: 58}]\n     *      // }\n     */\n    var groupBy = _curry2(_dispatchable('groupBy', _xgroupBy, function groupBy(fn, list) {\n        return _reduce(function (acc, elt) {\n            var key = fn(elt);\n            acc[key] = append(elt, acc[key] || (acc[key] = []));\n            return acc;\n        }, {}, list);\n    }));\n\n    /**\n     * Returns the first element of the given list or string. In some libraries\n     * this function is named `first`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @see R.tail, R.init, R.last\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n     *      R.head([]); //=> undefined\n     *\n     *      R.head('abc'); //=> 'a'\n     *      R.head(''); //=> ''\n     */\n    var head = nth(0);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists.  Duplication is determined according\n     * to the value returned by applying the supplied predicate to two list\n     * elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a,a -> Boolean) -> [a] -> [a] -> [a]\n     * @param {Function} pred A predicate function that determines whether\n     *        the two supplied elements are equal.\n     * @param {Array} list1 One list of items to compare\n     * @param {Array} list2 A second list of items to compare\n     * @see R.intersection\n     * @return {Array} A new list containing those elements common to both lists.\n     * @example\n     *\n     *      var buffaloSpringfield = [\n     *        {id: 824, name: 'Richie Furay'},\n     *        {id: 956, name: 'Dewey Martin'},\n     *        {id: 313, name: 'Bruce Palmer'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *      var csny = [\n     *        {id: 204, name: 'David Crosby'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 539, name: 'Graham Nash'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *\n     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n     */\n    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {\n        var results = [], idx = 0;\n        while (idx < list1.length) {\n            if (_containsWith(pred, list1[idx], list2)) {\n                results[results.length] = list1[idx];\n            }\n            idx += 1;\n        }\n        return uniqWith(pred, results);\n    });\n\n    /**\n     * Creates a new list with the separator interposed between elements.\n     *\n     * Dispatches to the `intersperse` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} separator The element to add to the list.\n     * @param {Array} list The list to be interposed.\n     * @return {Array} The new list.\n     * @example\n     *\n     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n     */\n    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n        var out = [];\n        var idx = 0;\n        var length = list.length;\n        while (idx < length) {\n            if (idx === length - 1) {\n                out.push(list[idx]);\n            } else {\n                out.push(list[idx], separator);\n            }\n            idx += 1;\n        }\n        return out;\n    }));\n\n    /**\n     * Same as R.invertObj, however this accounts for objects\n     * with duplicate values by putting the values into an\n     * array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: [ s, ... ]}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object with keys\n     * in an array.\n     * @example\n     *\n     *      var raceResultsByFirstName = {\n     *        first: 'alice',\n     *        second: 'jake',\n     *        third: 'alice',\n     *      };\n     *      R.invert(raceResultsByFirstName);\n     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n     */\n    var invert = _curry1(function invert(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            var val = obj[key];\n            var list = _has(val, out) ? out[val] : out[val] = [];\n            list[list.length] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object with the keys of the given object\n     * as values, and the values of the given object, which are\n     * coerced to strings, as keys.\n     * Note that the last key found is preferred when handling\n     * the same value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: s}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object\n     * @example\n     *\n     *      var raceResults = {\n     *        first: 'alice',\n     *        second: 'jake'\n     *      };\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': 'first', 'jake':'second' }\n     *\n     *      // Alternatively:\n     *      var raceResults = ['alice', 'jake'];\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': '0', 'jake':'1' }\n     */\n    var invertObj = _curry1(function invertObj(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            out[obj[key]] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns `true` if the given value is its type's empty value; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig a -> Boolean\n     * @param {*} x\n     * @return {Boolean}\n     * @see R.empty\n     * @example\n     *\n     *      R.isEmpty([1, 2, 3]);   //=> false\n     *      R.isEmpty([]);          //=> true\n     *      R.isEmpty('');          //=> true\n     *      R.isEmpty(null);        //=> false\n     *      R.isEmpty({});          //=> true\n     *      R.isEmpty({length: 0}); //=> false\n     */\n    var isEmpty = _curry1(function isEmpty(x) {\n        return x != null && equals(x, empty(x));\n    });\n\n    /**\n     * Returns the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @see R.init, R.head, R.tail\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n     *      R.last([]); //=> undefined\n     *\n     *      R.last('abc'); //=> 'c'\n     *      R.last(''); //=> ''\n     */\n    var last = nth(-1);\n\n    /**\n     * Returns the position of the last occurrence of an item in\n     * an array, or -1 if the item is not included in the array.\n     * `R.equals` is used to determine equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.indexOf\n     * @example\n     *\n     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n     */\n    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n            return xs.lastIndexOf(target);\n        } else {\n            var idx = xs.length - 1;\n            while (idx >= 0) {\n                if (equals(xs[idx], target)) {\n                    return idx;\n                }\n                idx -= 1;\n            }\n            return -1;\n        }\n    });\n\n    /**\n     * Returns a new list, constructed by applying the supplied function to every element of the\n     * supplied list.\n     *\n     * Note: `R.map` does not skip deleted or unassigned indices (sparse arrays), unlike the\n     * native `Array.prototype.map` method. For more details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Description\n     *\n     * Dispatches to the `map` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * Map treats also treats functions as functors and will compose them together.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Functor f => (a -> b) -> f a -> f b\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {Array} list The list to be iterated over.\n     * @return {Array} The new list.\n     * @example\n     *\n     *      var double = x => x * 2;\n     *\n     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n     *\n     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n     */\n    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n        switch (Object.prototype.toString.call(functor)) {\n        case '[object Function]':\n            return curryN(functor.length, function () {\n                return fn.call(this, functor.apply(this, arguments));\n            });\n        case '[object Object]':\n            return _reduce(function (acc, key) {\n                acc[key] = fn(functor[key]);\n                return acc;\n            }, {}, keys(functor));\n        default:\n            return _map(fn, functor);\n        }\n    }));\n\n    /**\n     * Map, but for objects. Creates an object with the same keys as `obj` and values\n     * generated by running each property of `obj` through `fn`. `fn` is passed one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category Object\n     * @sig (v -> v) -> {k: v} -> {k: v}\n     * @param {Function} fn A function called for each property in `obj`. Its return value will\n     * become a new property on the return object.\n     * @param {Object} obj The object to iterate over.\n     * @return {Object} A new object with the same keys as `obj` and values that are the result\n     *         of running each property through `fn`.\n     * @deprecated since v0.18.0\n     * @example\n     *\n     *      var values = { x: 1, y: 2, z: 3 };\n     *      var double = num => num * 2;\n     *\n     *      R.mapObj(double, values); //=> { x: 2, y: 4, z: 6 }\n     */\n    var mapObj = _curry2(function mapObj(fn, obj) {\n        return _reduce(function (acc, key) {\n            acc[key] = fn(obj[key]);\n            return acc;\n        }, {}, keys(obj));\n    });\n\n    /**\n     * Like `mapObj`, but passes additional arguments to the predicate function. The\n     * predicate function is passed three arguments: *(value, key, obj)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig (v, k, {k: v} -> v) -> {k: v} -> {k: v}\n     * @param {Function} fn A function called for each property in `obj`. Its return value will\n     *        become a new property on the return object.\n     * @param {Object} obj The object to iterate over.\n     * @return {Object} A new object with the same keys as `obj` and values that are the result\n     *         of running each property through `fn`.\n     * @example\n     *\n     *      var values = { x: 1, y: 2, z: 3 };\n     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n     *\n     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n     */\n    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n        return _reduce(function (acc, key) {\n            acc[key] = fn(obj[key], key, obj);\n            return acc;\n        }, {}, keys(obj));\n    });\n\n    /**\n     * Returns `true` if no elements of the list match the predicate,\n     * `false` otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n     * @see R.all, R.any\n     * @example\n     *\n     *      R.none(R.isNaN, [1, 2, 3]); //=> true\n     *      R.none(R.isNaN, [1, 2, 3, NaN]); //=> false\n     */\n    var none = _curry2(_complement(_dispatchable('any', _xany, any)));\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided initially followed by the arguments provided to `g`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partialRight\n     * @example\n     *\n     *      var multiply = (a, b) => a * b;\n     *      var double = R.partial(multiply, [2]);\n     *      double(2); //=> 4\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var sayHello = R.partial(greet, ['Hello']);\n     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partial = _createPartialApplicator(_concat);\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided to `g` followed by the arguments provided initially.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partial\n     * @example\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n     *\n     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partialRight = _createPartialApplicator(flip(_concat));\n\n    /**\n     * Takes a predicate and a list and returns the pair of lists of\n     * elements which do and do not satisfy the predicate, respectively.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [[a],[a]]\n     * @param {Function} pred A predicate to determine which array the element belongs to.\n     * @param {Array} list The array to partition.\n     * @return {Array} A nested array, containing first an array of elements that satisfied the predicate,\n     *         and second an array of elements that did not satisfy.\n     * @example\n     *\n     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n     *      //=> [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n     */\n    var partition = _curry2(function partition(pred, list) {\n        return _reduce(function (acc, elt) {\n            var xs = acc[pred(elt) ? 0 : 1];\n            xs[xs.length] = elt;\n            return acc;\n        }, [\n            [],\n            []\n        ], list);\n    });\n\n    /**\n     * Determines whether a nested path on an object has a specific value,\n     * in `R.equals` terms. Most likely used to filter a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Relation\n     * @sig [String] -> * -> {String: *} -> Boolean\n     * @param {Array} path The path of the nested property to use\n     * @param {*} val The value to compare the nested property with\n     * @param {Object} obj The object to check the nested property in\n     * @return {Boolean} `true` if the value equals the nested object property,\n     *         `false` otherwise.\n     * @example\n     *\n     *      var user1 = { address: { zipCode: 90210 } };\n     *      var user2 = { address: { zipCode: 55555 } };\n     *      var user3 = { name: 'Bob' };\n     *      var users = [ user1, user2, user3 ];\n     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n     *      R.filter(isFamous, users); //=> [ user1 ]\n     */\n    var pathEq = _curry3(function pathEq(_path, val, obj) {\n        return equals(path(_path, obj), val);\n    });\n\n    /**\n     * Returns a new list by plucking the same named property off all objects in the list supplied.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig k -> [{k: v}] -> [v]\n     * @param {Number|String} key The key name to pluck off of each object.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of values for the given key.\n     * @see R.props\n     * @example\n     *\n     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n     */\n    var pluck = _curry2(function pluck(p, list) {\n        return map(prop(p), list);\n    });\n\n    /**\n     * Returns `true` if the specified object property is equal, in `R.equals`\n     * terms, to the given value; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig String -> a -> Object -> Boolean\n     * @param {String} name\n     * @param {*} val\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.equals, R.propSatisfies\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n     *      var kids = [abby, fred, rusty, alois];\n     *      var hasBrownHair = R.propEq('hair', 'brown');\n     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n     */\n    var propEq = _curry3(function propEq(name, val, obj) {\n        return propSatisfies(equals(val), name, obj);\n    });\n\n    /**\n     * Returns `true` if the specified object property is of the given type;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Type\n     * @sig Type -> String -> Object -> Boolean\n     * @param {Function} type\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.is\n     * @see R.propSatisfies\n     * @example\n     *\n     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n     *      R.propIs(Number, 'x', {});            //=> false\n     */\n    var propIs = _curry3(function propIs(type, name, obj) {\n        return propSatisfies(is(type), name, obj);\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling the iterator\n     * function and passing it an accumulator value and the current value from the array, and\n     * then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*.  It may use `R.reduced` to\n     * shortcut the iteration.\n     *\n     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse arrays), unlike\n     * the native `Array.prototype.reduce` method. For more details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n     * @see R.reduced\n     *\n     * Dispatches to the `reduce` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var numbers = [1, 2, 3];\n     *      var add = (a, b) => a + b;\n     *\n     *      R.reduce(add, 10, numbers); //=> 16\n     */\n    var reduce = _curry3(_reduce);\n\n    /**\n     * Similar to `filter`, except that it keeps only values for which the given predicate\n     * function returns falsy. The predicate function is passed one argument: *(value)*.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} The new filtered array.\n     * @see R.filter\n     * @example\n     *\n     *      var isOdd = (n) => n % 2 === 1;\n     *\n     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n     */\n    var reject = _curry2(function reject(fn, list) {\n        return filter(_complement(fn), list);\n    });\n\n    /**\n     * Returns a fixed list of size `n` containing a specified identical value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig a -> n -> [a]\n     * @param {*} value The value to repeat.\n     * @param {Number} n The desired size of the output list.\n     * @return {Array} A new array containing `n` `value`s.\n     * @example\n     *\n     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n     *\n     *      var obj = {};\n     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n     *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n     */\n    var repeat = _curry2(function repeat(value, n) {\n        return times(always(value), n);\n    });\n\n    /**\n     * Returns the elements of the given list or string (or object with a `slice`\n     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n     *\n     * Dispatches to the `slice` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @sig Number -> Number -> String -> String\n     * @param {Number} fromIndex The start index (inclusive).\n     * @param {Number} toIndex The end index (exclusive).\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n     *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n     */\n    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n        return Array.prototype.slice.call(list, fromIndex, toIndex);\n    }));\n\n    /**\n     * Splits a collection into slices of the specified length.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @sig Number -> String -> [String]\n     * @param {Number} n\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n     */\n    var splitEvery = _curry2(function splitEvery(n, list) {\n        if (n <= 0) {\n            throw new Error('First argument to splitEvery must be a positive integer');\n        }\n        var result = [];\n        var idx = 0;\n        while (idx < list.length) {\n            result.push(slice(idx, idx += n, list));\n        }\n        return result;\n    });\n\n    /**\n     * Adds together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The sum of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.sum([2,4,6,8,100,1]); //=> 121\n     */\n    var sum = reduce(add, 0);\n\n    /**\n     * Returns all but the first element of the given list or string (or object\n     * with a `tail` method).\n     *\n     * Dispatches to the `slice` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @see R.head, R.init, R.last\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.tail([1, 2, 3]);  //=> [2, 3]\n     *      R.tail([1, 2]);     //=> [2]\n     *      R.tail([1]);        //=> []\n     *      R.tail([]);         //=> []\n     *\n     *      R.tail('abc');  //=> 'bc'\n     *      R.tail('ab');   //=> 'b'\n     *      R.tail('a');    //=> ''\n     *      R.tail('');     //=> ''\n     */\n    var tail = _checkForMethod('tail', slice(1, Infinity));\n\n    /**\n     * Returns the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `take` method).\n     *\n     * Dispatches to the `take` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.drop\n     * @example\n     *\n     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(3, 'ramda');               //=> 'ram'\n     *\n     *      var personnel = [\n     *        'Dave Brubeck',\n     *        'Paul Desmond',\n     *        'Eugene Wright',\n     *        'Joe Morello',\n     *        'Gerry Mulligan',\n     *        'Bob Bates',\n     *        'Joe Dodge',\n     *        'Ron Crotty'\n     *      ];\n     *\n     *      var takeFive = R.take(5);\n     *      takeFive(personnel);\n     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n     */\n    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {\n        return slice(0, n < 0 ? Infinity : n, xs);\n    }));\n\n    /**\n     * Returns a new list containing the first `n` elements of a given list, passing each value\n     * to the supplied predicate function, and terminating when the predicate function returns\n     * `false`. Excludes the element that caused the predicate function to fail. The predicate\n     * function is passed one argument: *(value)*.\n     *\n     * Dispatches to the `takeWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropWhile\n     * @example\n     *\n     *      var isNotFour = x => x !== 4;\n     *\n     *      R.takeWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n     */\n    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {\n        var idx = 0, len = list.length;\n        while (idx < len && fn(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, 0, idx);\n    }));\n\n    /**\n     * Initializes a transducer using supplied iterator function. Returns a single item by\n     * iterating through the list, successively calling the transformed iterator function and\n     * passing it an accumulator value and the current value from the array, and then passing\n     * the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It will be wrapped as a\n     * transformer to initialize the transducer. A transformer can be passed directly in place\n     * of an iterator function.  In both cases, iteration may be stopped early with the\n     * `R.reduced` function.\n     *\n     * A transducer is a function that accepts a transformer and returns a transformer and can\n     * be composed directly.\n     *\n     * A transformer is an an object that provides a 2-arity reducing iterator function, step,\n     * 0-arity initial value function, init, and 1-arity result extraction function, result.\n     * The step function is used as the iterator function in reduce. The result function is used\n     * to convert the final accumulator into the return type and in most cases is R.identity.\n     * The init function can be used to provide an initial accumulator, but is ignored by transduce.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @see R.reduce, R.reduced, R.into\n     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array. Wrapped as transformer, if necessary, and used to\n     *        initialize the transducer\n     * @param {*} acc The initial accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n     */\n    var transduce = curryN(4, function transduce(xf, fn, acc, list) {\n        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements of each list.  Duplication is\n     * determined according to the value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a,a -> Boolean) -> [a] -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @see R.union\n     * @example\n     *\n     *      var l1 = [{a: 1}, {a: 2}];\n     *      var l2 = [{a: 1}, {a: 4}];\n     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n     */\n    var unionWith = _curry3(function unionWith(pred, list1, list2) {\n        return uniqWith(pred, _concat(list1, list2));\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original list.\n     * `R.equals` is used to determine equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n     *      R.uniq([1, '1']);     //=> [1, '1']\n     *      R.uniq([[42], [42]]); //=> [[42]]\n     */\n    var uniq = uniqWith(equals);\n\n    /**\n     * Accepts a function `fn` and a list of transformer functions and returns a new curried\n     * function. When the new function is invoked, it calls the function `fn` with parameters\n     * consisting of the result of calling each supplied handler on successive arguments to the\n     * new function.\n     *\n     * If more arguments are passed to the returned function than transformer functions, those\n     * arguments are passed directly to `fn` as additional parameters. If you expect additional\n     * arguments that don't need to be transformed, although you can ignore them, it's best to\n     * pass an identity function so that the new function reports the correct arity.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} fn The function to wrap.\n     * @param {Array} transformers A list of transformer functions\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n     */\n    var useWith = _curry2(function useWith(fn, transformers) {\n        return curry(_arity(transformers.length, function () {\n            var args = [], idx = 0;\n            while (idx < transformers.length) {\n                args.push(transformers[idx].call(this, arguments[idx]));\n                idx += 1;\n            }\n            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));\n        }));\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec, false otherwise. An object satisfies the spec if, for each of the\n     * spec's own properties, accessing that property of the object gives the same\n     * value (in `R.equals` terms) as accessing that property of the spec.\n     *\n     * `whereEq` is a specialization of [`where`](#where).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @sig {String: *} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @see R.where\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = R.whereEq({a: 1, b: 2});\n     *\n     *      pred({a: 1});              //=> false\n     *      pred({a: 1, b: 2});        //=> true\n     *      pred({a: 1, b: 2, c: 3});  //=> true\n     *      pred({a: 1, b: 1});        //=> false\n     */\n    var whereEq = _curry2(function whereEq(spec, testObj) {\n        return where(mapObj(equals, spec), testObj);\n    });\n\n    var _flatCat = function () {\n        var preservingReduced = function (xf) {\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return xf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    var ret = xf['@@transducer/step'](result, input);\n                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n                }\n            };\n        };\n        return function _xcat(xf) {\n            var rxf = preservingReduced(xf);\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return rxf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n                }\n            };\n        };\n    }();\n\n    var _indexOf = function _indexOf(list, item, from) {\n        var idx = from;\n        while (idx < list.length) {\n            if (equals(list[idx], item)) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    };\n\n    var _stepCat = function () {\n        var _stepCatArray = {\n            '@@transducer/init': Array,\n            '@@transducer/step': function (xs, x) {\n                return _concat(xs, [x]);\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatString = {\n            '@@transducer/init': String,\n            '@@transducer/step': function (a, b) {\n                return a + b;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatObject = {\n            '@@transducer/init': Object,\n            '@@transducer/step': function (result, input) {\n                return merge(result, isArrayLike(input) ? createMapEntry(input[0], input[1]) : input);\n            },\n            '@@transducer/result': _identity\n        };\n        return function _stepCat(obj) {\n            if (_isTransformer(obj)) {\n                return obj;\n            }\n            if (isArrayLike(obj)) {\n                return _stepCatArray;\n            }\n            if (typeof obj === 'string') {\n                return _stepCatString;\n            }\n            if (typeof obj === 'object') {\n                return _stepCatObject;\n            }\n            throw new Error('Cannot create transformer for ' + obj);\n        };\n    }();\n\n    var _xchain = _curry2(function _xchain(f, xf) {\n        return map(f, _flatCat(xf));\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true\n     * for a given list of arguments if every one of the provided predicates\n     * is satisfied by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of\n     * the highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.anyPass\n     * @example\n     *\n     *      var isQueen = R.propEq('rank', 'Q');\n     *      var isSpade = R.propEq('suit', '♠︎');\n     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n     *\n     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n     */\n    var allPass = _curry1(function allPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (!preds[idx].apply(this, arguments)) {\n                    return false;\n                }\n                idx += 1;\n            }\n            return true;\n        });\n    });\n\n    /**\n     * Returns `true` if all elements are unique, in `R.equals` terms,\n     * otherwise `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category List\n     * @sig [a] -> Boolean\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if all elements are unique, else `false`.\n     * @example\n     *\n     *      R.allUniq(['1', 1]); //=> true\n     *      R.allUniq([1, 1]);   //=> false\n     *      R.allUniq([[42], [42]]); //=> false\n     */\n    var allUniq = _curry1(function allUniq(list) {\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            if (_indexOf(list, list[idx], idx + 1) >= 0) {\n                return false;\n            }\n            idx += 1;\n        }\n        return true;\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for\n     * a given list of arguments if at least one of the provided predicates is\n     * satisfied by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of\n     * the highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.allPass\n     * @example\n     *\n     *      var gte = R.anyPass([R.gt, R.equals]);\n     *\n     *      gte(3, 2); //=> true\n     *      gte(2, 2); //=> true\n     *      gte(2, 3); //=> false\n     */\n    var anyPass = _curry1(function anyPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (preds[idx].apply(this, arguments)) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        });\n    });\n\n    /**\n     * ap applies a list of functions to a list of values.\n     *\n     * Dispatches to the `ap` method of the second argument, if present. Also treats\n     * functions as applicatives.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig [f] -> [a] -> [f a]\n     * @param {Array} fns An array of functions\n     * @param {Array} vs An array of values\n     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n     * @example\n     *\n     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n     */\n    // else\n    var ap = _curry2(function ap(applicative, fn) {\n        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? curryN(Math.max(applicative.length, fn.length), function () {\n            return applicative.apply(this, arguments)(fn.apply(this, arguments));\n        }) : // else\n        _reduce(function (acc, f) {\n            return _concat(acc, map(f, fn));\n        }, [], applicative);\n    });\n\n    /**\n     * Returns the result of calling its first argument with the remaining\n     * arguments. This is occasionally useful as a converging function for\n     * `R.converge`: the left branch can produce a function while the right\n     * branch produces a value to be passed to that function as an argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig (*... -> a),*... -> a\n     * @param {Function} fn The function to apply to the remaining arguments.\n     * @param {...*} args Any number of positional arguments.\n     * @return {*}\n     * @see R.apply\n     * @example\n     *\n     *      var indentN = R.pipe(R.times(R.always(' ')),\n     *                           R.join(''),\n     *                           R.replace(/^(?!$)/gm));\n     *\n     *      var format = R.converge(R.call,\n     *                              R.pipe(R.prop('indent'), indentN),\n     *                              R.prop('value'));\n     *\n     *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n     */\n    var call = curry(function call(fn) {\n        return fn.apply(this, _slice(arguments, 1));\n    });\n\n    /**\n     * `chain` maps a function over a list and concatenates the results.\n     * `chain` is also known as `flatMap` in some libraries\n     *\n     * Dispatches to the `chain` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig (a -> [b]) -> [a] -> [b]\n     * @param {Function} fn\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      var duplicate = n => [n, n];\n     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n     */\n    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {\n        if (typeof monad === 'function') {\n            return function () {\n                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);\n            };\n        }\n        return _makeFlat(false)(map(fn, monad));\n    }));\n\n    /**\n     * Turns a list of Functors into a Functor of a list, applying\n     * a mapping function to the elements of the list along the way.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category List\n     * @see R.commute\n     * @sig Functor f => (a -> f b) -> (x -> f x) -> [a] -> f [b]\n     * @param {Function} fn The transformation function\n     * @param {Function} of A function that returns the data type to return\n     * @param {Array} list An array of functors of the same type\n     * @return {*}\n     * @example\n     *\n     *      var add10 = R.map(R.add(10));\n     *      R.commuteMap(add10, R.of, [[1], [2, 3]]);   //=> [[11, 12], [11, 13]]\n     *      R.commuteMap(add10, R.of, [[1, 2], [3]]);   //=> [[11, 13], [12, 13]]\n     *      R.commuteMap(add10, R.of, [[1], [2], [3]]); //=> [[11, 12, 13]]\n     *      R.commuteMap(add10, Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([11, 12, 13])\n     *      R.commuteMap(add10, Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     *\n     *      var fetch = url => Future((rej, res) => http.get(url, res).on('error', rej));\n     *      R.commuteMap(fetch, Future.of, [\n     *        'http://ramdajs.com',\n     *        'http://github.com/ramda'\n     *      ]); //=> Future([IncomingMessage, IncomingMessage])\n     */\n    var commuteMap = _curry3(function commuteMap(fn, of, list) {\n        function consF(acc, x) {\n            return ap(map(prepend, fn(x)), acc);\n        }\n        return reduceRight(consF, of([]), list);\n    });\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called with the same\n     * arguments and returns the same type. The arity of the function returned is specified\n     * to allow using variadic constructor functions.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Function\n     * @sig Number -> (* -> {*}) -> (* -> {*})\n     * @param {Number} n The arity of the constructor function.\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Variadic constructor function\n     *      var Widget = () => {\n     *        this.children = Array.prototype.slice.call(arguments);\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets\n     */\n    var constructN = _curry2(function constructN(n, Fn) {\n        if (n > 10) {\n            throw new Error('Constructor with greater than ten arguments');\n        }\n        if (n === 0) {\n            return function () {\n                return new Fn();\n            };\n        }\n        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n            switch (arguments.length) {\n            case 1:\n                return new Fn($0);\n            case 2:\n                return new Fn($0, $1);\n            case 3:\n                return new Fn($0, $1, $2);\n            case 4:\n                return new Fn($0, $1, $2, $3);\n            case 5:\n                return new Fn($0, $1, $2, $3, $4);\n            case 6:\n                return new Fn($0, $1, $2, $3, $4, $5);\n            case 7:\n                return new Fn($0, $1, $2, $3, $4, $5, $6);\n            case 8:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n            case 9:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n            case 10:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n            }\n        }));\n    });\n\n    /**\n     * Accepts a converging function and a list of branching functions and returns a new function.\n     * When invoked, this new function is applied to some arguments, each branching\n     * function is applied to those same arguments. The results of each branching\n     * function are passed as arguments to the converging function to produce the return value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.2\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} after A function. `after` will be invoked with the return values of\n     *        `fn1` and `fn2` as its arguments.\n     * @param {Array} functions A list of functions.\n     * @return {Function} A new function.\n     * @example\n     *\n     *      var add = (a, b) => a + b;\n     *      var multiply = (a, b) => a * b;\n     *      var subtract = (a, b) => a - b;\n     *\n     *      //≅ multiply( add(1, 2), subtract(1, 2) );\n     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3\n     *\n     *      var add3 = (a, b, c) => a + b + c;\n     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4\n     */\n    var converge = _curry2(function converge(after, fns) {\n        return curryN(Math.max.apply(Math, pluck('length', fns)), function () {\n            var args = arguments;\n            var context = this;\n            return after.apply(context, _map(function (fn) {\n                return fn.apply(context, args);\n            }, fns));\n        });\n    });\n\n    /**\n     * Returns all but the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `drop` method).\n     *\n     * Dispatches to the `drop` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @see R.transduce\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.take\n     * @example\n     *\n     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(3, 'ramda');               //=> 'da'\n     */\n    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {\n        return slice(Math.max(0, n), Infinity, xs);\n    }));\n\n    /**\n     * Returns a list containing all but the last `n` elements of the given `list`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements of `xs` to skip.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.takeLast\n     * @example\n     *\n     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(3, 'ramda');               //=> 'ra'\n     */\n    var dropLast = _curry2(function dropLast(n, xs) {\n        return take(n < xs.length ? xs.length - n : 0, xs);\n    });\n\n    /**\n     * Returns a new list without any consecutively repeating elements. Equality is\n     * determined by applying the supplied predicate two consecutive elements.\n     * The first element in a series of equal element is the one being preserved.\n     *\n     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @example\n     *\n     *      var lengthEq = (x, y) => Math.abs(x) === Math.abs(y);\n     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n     */\n    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n        var result = [];\n        var idx = 1;\n        var len = list.length;\n        if (len !== 0) {\n            result[0] = list[0];\n            while (idx < len) {\n                if (!pred(last(result), list[idx])) {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n        }\n        return result;\n    }));\n\n    /**\n     * Takes a function and two values in its domain and returns `true` if\n     * the values map to the same value in the codomain; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Relation\n     * @sig (a -> b) -> a -> a -> Boolean\n     * @param {Function} f\n     * @param {*} x\n     * @param {*} y\n     * @return {Boolean}\n     * @example\n     *\n     *      R.eqBy(Math.abs, 5, -5); //=> true\n     */\n    var eqBy = _curry3(function eqBy(f, x, y) {\n        return equals(f(x), f(y));\n    });\n\n    /**\n     * Reports whether two objects have the same value, in `R.equals` terms,\n     * for the specified property. Useful as a curried predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig k -> {k: v} -> {k: v} -> Boolean\n     * @param {String} prop The name of the property to compare\n     * @param {Object} obj1\n     * @param {Object} obj2\n     * @return {Boolean}\n     *\n     * @example\n     *\n     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n     *      R.eqProps('a', o1, o2); //=> false\n     *      R.eqProps('c', o1, o2); //=> true\n     */\n    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n        return equals(obj1[prop], obj2[prop]);\n    });\n\n    /**\n     * Returns the position of the first occurrence of an item in an array,\n     * or -1 if the item is not included in the array. `R.equals` is used to\n     * determine equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.lastIndexOf\n     * @example\n     *\n     *      R.indexOf(3, [1,2,3,4]); //=> 2\n     *      R.indexOf(10, [1,2,3,4]); //=> -1\n     */\n    var indexOf = _curry2(function indexOf(target, xs) {\n        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n    });\n\n    /**\n     * Returns all but the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @see R.last, R.head, R.tail\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.init([1, 2, 3]);  //=> [1, 2]\n     *      R.init([1, 2]);     //=> [1]\n     *      R.init([1]);        //=> []\n     *      R.init([]);         //=> []\n     *\n     *      R.init('abc');  //=> 'ab'\n     *      R.init('ab');   //=> 'a'\n     *      R.init('a');    //=> ''\n     *      R.init('');     //=> ''\n     */\n    var init = slice(0, -1);\n\n    /**\n     * Transforms the items of the list with the transducer and appends the transformed items to\n     * the accumulator using an appropriate iterator function based on the accumulator type.\n     *\n     * The accumulator can be an array, string, object or a transformer. Iterated items will\n     * be appended to arrays and concatenated to strings. Objects will be merged directly or 2-item\n     * arrays will be merged as key, value pairs.\n     *\n     * The accumulator can also be a transformer object that provides a 2-arity reducing iterator\n     * function, step, 0-arity initial value function, init, and 1-arity result extraction function\n     * result. The step function is used as the iterator function in reduce. The result function is\n     * used to convert the final accumulator into the return type and in most cases is R.identity.\n     * The init function is used to provide the initial accumulator.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig a -> (b -> b) -> [c] -> a\n     * @param {*} acc The initial accumulator value.\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.into([], transducer, numbers); //=> [2, 3]\n     *\n     *      var intoArray = R.into([]);\n     *      intoArray(transducer, numbers); //=> [2, 3]\n     */\n    var into = _curry3(function into(acc, xf, list) {\n        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), acc, list);\n    });\n\n    /**\n     * Returns `true` if all elements are unique, in `R.equals` terms,\n     * otherwise `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig [a] -> Boolean\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if all elements are unique, else `false`.\n     * @see R.allUniq\n     * @deprecated since v0.18.0\n     * @example\n     *\n     *      R.isSet(['1', 1]); //=> true\n     *      R.isSet([1, 1]);   //=> false\n     *      R.isSet([[42], [42]]); //=> false\n     */\n    var isSet = allUniq;\n\n    /**\n     * Returns a lens for the given getter and setter functions. The getter \"gets\"\n     * the value of the focus; the setter \"sets\" the value of the focus. The setter\n     * should not mutate the data structure.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n     * @param {Function} getter\n     * @param {Function} setter\n     * @return {Lens}\n     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lens = _curry2(function lens(getter, setter) {\n        return function (f) {\n            return function (s) {\n                return map(function (v) {\n                    return setter(v, s);\n                }, f(getter(s)));\n            };\n        };\n    });\n\n    /**\n     * Returns a lens whose focus is the specified index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Number -> Lens s a\n     * @param {Number} n\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n     */\n    var lensIndex = _curry1(function lensIndex(n) {\n        return lens(nth(n), update(n));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig String -> Lens s a\n     * @param {String} k\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lensProp = _curry1(function lensProp(k) {\n        return lens(prop(k), assoc(k));\n    });\n\n    /**\n     * \"lifts\" a function to be the specified arity, so that it may \"map over\" that many\n     * lists (or other Functors).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @see R.lift\n     * @category Function\n     * @sig Number -> (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The function `fn` applicable to mappable objects.\n     * @example\n     *\n     *      var madd3 = R.liftN(3, R.curryN(3, () => R.reduce(R.add, 0, arguments)));\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     */\n    var liftN = _curry2(function liftN(arity, fn) {\n        var lifted = curryN(arity, fn);\n        return curryN(arity, function () {\n            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));\n        });\n    });\n\n    /**\n     * Returns the mean of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.mean([2, 7, 9]); //=> 6\n     *      R.mean([]); //=> NaN\n     */\n    var mean = _curry1(function mean(list) {\n        return sum(list) / list.length;\n    });\n\n    /**\n     * Returns the median of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.median([2, 9, 7]); //=> 7\n     *      R.median([7, 2, 10, 9]); //=> 8\n     *      R.median([]); //=> NaN\n     */\n    var median = _curry1(function median(list) {\n        var len = list.length;\n        if (len === 0) {\n            return NaN;\n        }\n        var width = 2 - len % 2;\n        var idx = (len - width) / 2;\n        return mean(_slice(list).sort(function (a, b) {\n            return a < b ? -1 : a > b ? 1 : 0;\n        }).slice(idx, idx + width));\n    });\n\n    /**\n     * Merges a list of objects together into one object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig [{k: v}] -> {k: v}\n     * @param {Array} list An array of objects\n     * @return {Object} A merged object.\n     * @see R.reduce\n     * @example\n     *\n     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n     */\n    var mergeAll = _curry1(function mergeAll(list) {\n        return reduce(merge, {}, list);\n    });\n\n    /**\n     * Performs left-to-right function composition. The leftmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * In some libraries this function is named `sequence`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.compose\n     * @example\n     *\n     *      var f = R.pipe(Math.pow, R.negate, R.inc);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var pipe = function pipe() {\n        if (arguments.length === 0) {\n            throw new Error('pipe requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Performs left-to-right composition of one or more Promise-returning\n     * functions. The leftmost function may have any arity; the remaining\n     * functions must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.composeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n     */\n    var pipeP = function pipeP() {\n        if (arguments.length === 0) {\n            throw new Error('pipeP requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Multiplies together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The product of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.product([2,4,6,8,100,1]); //=> 38400\n     */\n    var product = reduce(multiply, 1);\n\n    /**\n     * Reasonable analog to SQL `select` statement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @category Relation\n     * @sig [k] -> [{k: v}] -> [{k: v}]\n     * @param {Array} props The property names to project\n     * @param {Array} objs The objects to query\n     * @return {Array} An array of objects with just the `props` properties.\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n     *      var kids = [abby, fred];\n     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n     */\n    // passing `identity` gives correct arity\n    var project = useWith(_map, [\n        pickAll,\n        identity\n    ]);\n\n    /**\n     * Returns a new list containing the last `n` elements of the given list.\n     * If `n > list.length`, returns a list of `list.length` elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements to return.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.dropLast\n     * @example\n     *\n     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(3, 'ramda');               //=> 'mda'\n     */\n    var takeLast = _curry2(function takeLast(n, xs) {\n        return drop(n >= 0 ? xs.length - n : 0, xs);\n    });\n\n    /**\n     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting\n     * from any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain c => c (c a) -> c a\n     * @param {*} list\n     * @return {*}\n     * @see R.flatten, R.chain\n     * @example\n     *\n     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n     */\n    var unnest = chain(_identity);\n\n    var _contains = function _contains(a, list) {\n        return _indexOf(list, a, 0) >= 0;\n    };\n\n    //  mapPairs :: (Object, [String]) -> [String]\n    // Function, RegExp, user-defined types\n    var _toString = function _toString(x, seen) {\n        var recur = function recur(y) {\n            var xs = seen.concat([x]);\n            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n        };\n        //  mapPairs :: (Object, [String]) -> [String]\n        var mapPairs = function (obj, keys) {\n            return _map(function (k) {\n                return _quote(k) + ': ' + recur(obj[k]);\n            }, keys.slice().sort());\n        };\n        switch (Object.prototype.toString.call(x)) {\n        case '[object Arguments]':\n            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n        case '[object Array]':\n            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n                return /^\\d+$/.test(k);\n            }, keys(x)))).join(', ') + ']';\n        case '[object Boolean]':\n            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n        case '[object Date]':\n            return 'new Date(' + _quote(_toISOString(x)) + ')';\n        case '[object Null]':\n            return 'null';\n        case '[object Number]':\n            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n        case '[object String]':\n            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n        case '[object Undefined]':\n            return 'undefined';\n        default:\n            return typeof x.constructor === 'function' && x.constructor.name !== 'Object' && typeof x.toString === 'function' && x.toString() !== '[object Object]' ? x.toString() : // Function, RegExp, user-defined types\n            '{' + mapPairs(x, keys(x)).join(', ') + '}';\n        }\n    };\n\n    /**\n     * Turns a list of Functors into a Functor of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category List\n     * @see R.commuteMap\n     * @sig Functor f => (x -> f x) -> [f a] -> f [a]\n     * @param {Function} of A function that returns the data type to return\n     * @param {Array} list An array of functors of the same type\n     * @return {*}\n     * @example\n     *\n     *      R.commute(R.of, [[1], [2, 3]]);   //=> [[1, 2], [1, 3]]\n     *      R.commute(R.of, [[1, 2], [3]]);   //=> [[1, 3], [2, 3]]\n     *      R.commute(R.of, [[1], [2], [3]]); //=> [[1, 2, 3]]\n     *      R.commute(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n     *      R.commute(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     */\n    var commute = commuteMap(identity);\n\n    /**\n     * Performs right-to-left function composition. The rightmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipe\n     * @example\n     *\n     *      var f = R.compose(R.inc, R.negate, Math.pow);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var compose = function compose() {\n        if (arguments.length === 0) {\n            throw new Error('compose requires at least one argument');\n        }\n        return pipe.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the right-to-left Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @see R.pipeK\n     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.composeK(\n     *        R.compose(Maybe.of, R.toUpper),\n     *        get('state'),\n     *        get('address'),\n     *        get('user'),\n     *        parseJson\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var composeK = function composeK() {\n        return compose.apply(this, prepend(identity, map(chain, arguments)));\n    };\n\n    /**\n     * Performs right-to-left composition of one or more Promise-returning\n     * functions. The rightmost function may have any arity; the remaining\n     * functions must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);\n     */\n    var composeP = function composeP() {\n        if (arguments.length === 0) {\n            throw new Error('composeP requires at least one argument');\n        }\n        return pipeP.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called with the same\n     * arguments and returns the same type.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> {*}) -> (* -> {*})\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Constructor function\n     *      var Widget = config => {\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets\n     */\n    var construct = _curry1(function construct(Fn) {\n        return constructN(Fn.length, Fn);\n    });\n\n    /**\n     * Returns `true` if the specified value is equal, in `R.equals` terms,\n     * to at least one element of the given list; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Boolean\n     * @param {Object} a The item to compare against.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the item is in the list, `false` otherwise.\n     * @see R.any\n     * @example\n     *\n     *      R.contains(3, [1, 2, 3]); //=> true\n     *      R.contains(4, [1, 2, 3]); //=> false\n     *      R.contains([42], [[42]]); //=> true\n     */\n    var contains = _curry2(_contains);\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not contained in the second list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [a] -> [a] -> [a]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.differenceWith\n     * @example\n     *\n     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n     */\n    var difference = _curry2(function difference(first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n                out[out.length] = first[idx];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new list without any consecutively repeating elements.\n     * `R.equals` is used to determine equality.\n     *\n     * Dispatches to the `dropRepeats` method of the first argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     * @see R.transduce\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @example\n     *\n     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n     */\n    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those elements common to both lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [a] -> [a] -> [a]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @see R.intersectionWith\n     * @return {Array} The list of elements found in both `list1` and `list2`.\n     * @example\n     *\n     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n     */\n    var intersection = _curry2(function intersection(list1, list2) {\n        return uniq(_filter(flip(_contains)(list1), list2));\n    });\n\n    /**\n     * \"lifts\" a function of arity > 1 so that it may \"map over\" an Array or\n     * other Functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @see R.liftN\n     * @category Function\n     * @sig (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The function `fn` applicable to mappable objects.\n     * @example\n     *\n     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));\n     *\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     *\n     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));\n     *\n     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n     */\n    var lift = _curry1(function lift(fn) {\n        return liftN(fn.length, fn);\n    });\n\n    /**\n     * Returns a partial copy of an object omitting the keys specified.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [String] -> {String: *} -> {String: *}\n     * @param {Array} names an array of String property names to omit from the new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with properties from `names` not on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n     */\n    var omit = _curry2(function omit(names, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (!_contains(prop, names)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the left-to-right Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @see R.composeK\n     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.pipeK(\n     *        parseJson,\n     *        get('user'),\n     *        get('address'),\n     *        get('state'),\n     *        R.compose(Maybe.of, R.toUpper)\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var pipeK = function pipeK() {\n        return composeK.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the string representation of the given value. `eval`'ing the output\n     * should result in a value equivalent to the input value. Many of the built-in\n     * `toString` methods do not satisfy this requirement.\n     *\n     * If the given value is an `[object Object]` with a `toString` method other\n     * than `Object.prototype.toString`, this method is invoked with no arguments\n     * to produce the return value. This means user-defined constructor functions\n     * can provide a suitable `toString` method. For example:\n     *\n     *     function Point(x, y) {\n     *       this.x = x;\n     *       this.y = y;\n     *     }\n     *\n     *     Point.prototype.toString = function() {\n     *       return 'new Point(' + this.x + ', ' + this.y + ')';\n     *     };\n     *\n     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category String\n     * @sig * -> String\n     * @param {*} val\n     * @return {String}\n     * @example\n     *\n     *      R.toString(42); //=> '42'\n     *      R.toString('abc'); //=> '\"abc\"'\n     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n     */\n    var toString = _curry1(function toString(val) {\n        return _toString(val, []);\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the\n     * elements of each list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [a] -> [a] -> [a]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @example\n     *\n     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n     */\n    var union = _curry2(compose(uniq, _concat));\n\n    /**\n     * Returns a new list containing only one copy of each element in the\n     * original list, based upon the value returned by applying the supplied\n     * function to each list element. Prefers the first item if the supplied\n     * function produces the same value on two items. `R.equals` is used for\n     * comparison.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> b) -> [a] -> [a]\n     * @param {Function} fn A function used to produce a value to use during comparisons.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n     */\n    var uniqBy = _curry2(function uniqBy(fn, list) {\n        var idx = 0, applied = [], result = [], appliedItem, item;\n        while (idx < list.length) {\n            item = list[idx];\n            appliedItem = fn(item);\n            if (!_contains(appliedItem, applied)) {\n                result.push(item);\n                applied.push(appliedItem);\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * A function wrapping calls to the two functions in an `&&` operation, returning the result of the first\n     * function if it is false-y and the result of the second function otherwise.\n     *\n     * `R.both` will work on all other applicatives as well.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n     * @see R.and\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.both(gt10, even);\n     *      f(100); //=> true\n     *      f(101); //=> false\n     */\n    var both = lift(and);\n\n    /**\n     * Takes a function `f` and returns a function `g` such that:\n     *\n     *   - applying `g` to zero or more arguments will give __true__ if applying\n     *     the same arguments to `f` gives a logical __false__ value; and\n     *\n     *   - applying `g` to zero or more arguments will give __false__ if applying\n     *     the same arguments to `f` gives a logical __true__ value.\n     *\n     * `R.complement` will work on all other functors as well.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> *) -> (*... -> Boolean)\n     * @param {Function} f\n     * @return {Function}\n     * @see R.not\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *      var isOdd = R.complement(isEven);\n     *      isOdd(21); //=> true\n     *      isOdd(42); //=> false\n     */\n    var complement = lift(not);\n\n    /**\n     * A function wrapping calls to the two functions in an `||` operation, returning the result of the first\n     * function if it is truth-y and the result of the second function otherwise.\n     *\n     * `R.either` will work on all other applicatives as well.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n     * @see R.or\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.either(gt10, even);\n     *      f(101); //=> true\n     *      f(8); //=> true\n     */\n    var either = lift(or);\n\n    /**\n     * Turns a named method with a specified arity into a function\n     * that can be called directly supplied with arguments and a target object.\n     *\n     * The returned function is curried and accepts `arity + 1` parameters where\n     * the final parameter is the target object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n     * @param {Number} arity Number of arguments the returned function should take\n     *        before the target object.\n     * @param {Function} method Name of the method to call.\n     * @return {Function} A new curried function.\n     * @example\n     *\n     *      var sliceFrom = R.invoker(1, 'slice');\n     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n     *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n     */\n    var invoker = _curry2(function invoker(arity, method) {\n        return curryN(arity + 1, function () {\n            var target = arguments[arity];\n            if (target != null && is(Function, target[method])) {\n                return target[method].apply(target, _slice(arguments, 0, arity));\n            }\n            throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n        });\n    });\n\n    /**\n     * Returns a string made by inserting the `separator` between each\n     * element and concatenating all the elements into a single string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig String -> [a] -> String\n     * @param {Number|String} separator The string used to separate the elements.\n     * @param {Array} xs The elements to join into a string.\n     * @return {String} str The string made by concatenating `xs` with `separator`.\n     * @see R.split\n     * @example\n     *\n     *      var spacer = R.join(' ');\n     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n     */\n    var join = invoker(1, 'join');\n\n    /**\n     * Creates a new function that, when invoked, caches the result of calling `fn` for a given\n     * argument set and returns the result. Subsequent calls to the memoized `fn` with the same\n     * argument set will not result in an additional call to `fn`; instead, the cached result\n     * for that set of arguments will be returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (*... -> a) -> (*... -> a)\n     * @param {Function} fn The function to memoize.\n     * @return {Function} Memoized version of `fn`.\n     * @example\n     *\n     *      var count = 0;\n     *      var factorial = R.memoize(n => {\n     *        count += 1;\n     *        return R.product(R.range(1, n + 1));\n     *      });\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      count; //=> 1\n     */\n    var memoize = _curry1(function memoize(fn) {\n        var cache = {};\n        return function () {\n            var key = toString(arguments);\n            if (!_has(key, cache)) {\n                cache[key] = fn.apply(this, arguments);\n            }\n            return cache[key];\n        };\n    });\n\n    /**\n     * Splits a string into an array of strings based on the given\n     * separator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig (String | RegExp) -> String -> [String]\n     * @param {String|RegExp} sep The pattern.\n     * @param {String} str The string to separate into an array.\n     * @return {Array} The array of strings from `str` separated by `str`.\n     * @see R.join\n     * @example\n     *\n     *      var pathComponents = R.split('/');\n     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n     *\n     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n     */\n    var split = invoker(1, 'split');\n\n    /**\n     * Determines whether a given string matches a given regular expression.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @see R.match\n     * @category String\n     * @sig RegExp -> String -> Boolean\n     * @param {RegExp} pattern\n     * @param {String} str\n     * @return {Boolean}\n     * @example\n     *\n     *      R.test(/^x/, 'xyz'); //=> true\n     *      R.test(/^y/, 'xyz'); //=> false\n     */\n    var test = _curry2(function test(pattern, str) {\n        if (!_isRegExp(pattern)) {\n            throw new TypeError('\\u2018test\\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n        }\n        return _cloneRegExp(pattern).test(str);\n    });\n\n    /**\n     * The lower case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to lower case.\n     * @return {String} The lower case version of `str`.\n     * @see R.toUpper\n     * @example\n     *\n     *      R.toLower('XYZ'); //=> 'xyz'\n     */\n    var toLower = invoker(0, 'toLowerCase');\n\n    /**\n     * The upper case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to upper case.\n     * @return {String} The upper case version of `str`.\n     * @see R.toLower\n     * @example\n     *\n     *      R.toUpper('abc'); //=> 'ABC'\n     */\n    var toUpper = invoker(0, 'toUpperCase');\n\n    /**\n     * Returns the result of concatenating the given lists or strings.\n     *\n     * Dispatches to the `concat` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @sig String -> String -> String\n     * @param {Array|String} a\n     * @param {Array|String} b\n     * @return {Array|String}\n     *\n     * @example\n     *\n     *      R.concat([], []); //=> []\n     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n     */\n    var concat = flip(invoker(1, 'concat'));\n\n    var R = {\n        F: F,\n        T: T,\n        __: __,\n        add: add,\n        addIndex: addIndex,\n        adjust: adjust,\n        all: all,\n        allPass: allPass,\n        allUniq: allUniq,\n        always: always,\n        and: and,\n        any: any,\n        anyPass: anyPass,\n        ap: ap,\n        aperture: aperture,\n        append: append,\n        apply: apply,\n        assoc: assoc,\n        assocPath: assocPath,\n        binary: binary,\n        bind: bind,\n        both: both,\n        call: call,\n        chain: chain,\n        clone: clone,\n        commute: commute,\n        commuteMap: commuteMap,\n        comparator: comparator,\n        complement: complement,\n        compose: compose,\n        composeK: composeK,\n        composeP: composeP,\n        concat: concat,\n        cond: cond,\n        construct: construct,\n        constructN: constructN,\n        contains: contains,\n        containsWith: containsWith,\n        converge: converge,\n        countBy: countBy,\n        createMapEntry: createMapEntry,\n        curry: curry,\n        curryN: curryN,\n        dec: dec,\n        defaultTo: defaultTo,\n        difference: difference,\n        differenceWith: differenceWith,\n        dissoc: dissoc,\n        dissocPath: dissocPath,\n        divide: divide,\n        drop: drop,\n        dropLast: dropLast,\n        dropLastWhile: dropLastWhile,\n        dropRepeats: dropRepeats,\n        dropRepeatsWith: dropRepeatsWith,\n        dropWhile: dropWhile,\n        either: either,\n        empty: empty,\n        eqBy: eqBy,\n        eqProps: eqProps,\n        equals: equals,\n        evolve: evolve,\n        filter: filter,\n        find: find,\n        findIndex: findIndex,\n        findLast: findLast,\n        findLastIndex: findLastIndex,\n        flatten: flatten,\n        flip: flip,\n        forEach: forEach,\n        fromPairs: fromPairs,\n        functions: functions,\n        functionsIn: functionsIn,\n        groupBy: groupBy,\n        gt: gt,\n        gte: gte,\n        has: has,\n        hasIn: hasIn,\n        head: head,\n        identical: identical,\n        identity: identity,\n        ifElse: ifElse,\n        inc: inc,\n        indexOf: indexOf,\n        init: init,\n        insert: insert,\n        insertAll: insertAll,\n        intersection: intersection,\n        intersectionWith: intersectionWith,\n        intersperse: intersperse,\n        into: into,\n        invert: invert,\n        invertObj: invertObj,\n        invoker: invoker,\n        is: is,\n        isArrayLike: isArrayLike,\n        isEmpty: isEmpty,\n        isNil: isNil,\n        isSet: isSet,\n        join: join,\n        keys: keys,\n        keysIn: keysIn,\n        last: last,\n        lastIndexOf: lastIndexOf,\n        length: length,\n        lens: lens,\n        lensIndex: lensIndex,\n        lensProp: lensProp,\n        lift: lift,\n        liftN: liftN,\n        lt: lt,\n        lte: lte,\n        map: map,\n        mapAccum: mapAccum,\n        mapAccumRight: mapAccumRight,\n        mapObj: mapObj,\n        mapObjIndexed: mapObjIndexed,\n        match: match,\n        mathMod: mathMod,\n        max: max,\n        maxBy: maxBy,\n        mean: mean,\n        median: median,\n        memoize: memoize,\n        merge: merge,\n        mergeAll: mergeAll,\n        min: min,\n        minBy: minBy,\n        modulo: modulo,\n        multiply: multiply,\n        nAry: nAry,\n        negate: negate,\n        none: none,\n        not: not,\n        nth: nth,\n        nthArg: nthArg,\n        objOf: objOf,\n        of: of,\n        omit: omit,\n        once: once,\n        or: or,\n        over: over,\n        pair: pair,\n        partial: partial,\n        partialRight: partialRight,\n        partition: partition,\n        path: path,\n        pathEq: pathEq,\n        pathOr: pathOr,\n        pick: pick,\n        pickAll: pickAll,\n        pickBy: pickBy,\n        pipe: pipe,\n        pipeK: pipeK,\n        pipeP: pipeP,\n        pluck: pluck,\n        prepend: prepend,\n        product: product,\n        project: project,\n        prop: prop,\n        propEq: propEq,\n        propIs: propIs,\n        propOr: propOr,\n        propSatisfies: propSatisfies,\n        props: props,\n        range: range,\n        reduce: reduce,\n        reduceRight: reduceRight,\n        reduced: reduced,\n        reject: reject,\n        remove: remove,\n        repeat: repeat,\n        replace: replace,\n        reverse: reverse,\n        scan: scan,\n        set: set,\n        slice: slice,\n        sort: sort,\n        sortBy: sortBy,\n        split: split,\n        splitEvery: splitEvery,\n        subtract: subtract,\n        sum: sum,\n        tail: tail,\n        take: take,\n        takeLast: takeLast,\n        takeLastWhile: takeLastWhile,\n        takeWhile: takeWhile,\n        tap: tap,\n        test: test,\n        times: times,\n        toLower: toLower,\n        toPairs: toPairs,\n        toPairsIn: toPairsIn,\n        toString: toString,\n        toUpper: toUpper,\n        transduce: transduce,\n        trim: trim,\n        type: type,\n        unapply: unapply,\n        unary: unary,\n        uncurryN: uncurryN,\n        unfold: unfold,\n        union: union,\n        unionWith: unionWith,\n        uniq: uniq,\n        uniqBy: uniqBy,\n        uniqWith: uniqWith,\n        unless: unless,\n        unnest: unnest,\n        update: update,\n        useWith: useWith,\n        values: values,\n        valuesIn: valuesIn,\n        view: view,\n        when: when,\n        where: where,\n        whereEq: whereEq,\n        wrap: wrap,\n        xprod: xprod,\n        zip: zip,\n        zipObj: zipObj,\n        zipWith: zipWith\n    };\n\n  /* TEST_ENTRY_POINT */\n\n  if (typeof exports === 'object') {\n    module.exports = R;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function() { return R; });\n  } else {\n    this.R = R;\n  }\n\n}.call(this));\n"]}